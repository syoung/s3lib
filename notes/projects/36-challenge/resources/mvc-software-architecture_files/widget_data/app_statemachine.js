Appcelerator.Module.Statemachine={getName:function(){return"appcelerator statemachine"},getDescription:function(){return"statemachine widget"},getVersion:function(){return 1},getSpecVersion:function(){return 1},getAuthor:function(){return"Jeff Haynie"},getModuleURL:function(){return"http://www.appcelerator.org"},isWidget:function(){return true},getWidgetName:function(){return"app:statemachine"},getAttributes:function(){return[{name:"initial",optional:true,description:"Initial state of the state machine."}]},buildWidget:function(d,U){var a=U["initial"];var S=false;var R=d.id;if(!R){throw"app:statemachine requires an ID attribute"}d.value=a||"";var V=[];for(var W=0,b=d.childNodes.length;W<b;W++){var Q=d.childNodes[W];if(Q.nodeType==1&&Q.nodeName.toLowerCase()=="state"){var T=Q.getAttribute("name");var X=Q.getAttribute("if");if(a&&a==T){S=true}Appcelerator.Compiler.StateMachine.addState(R,T,null);V.push(Appcelerator.Compiler.StateMachine.compileStateCondition(T,X))}}var Y=Appcelerator.Compiler.StateMachine.buildConditions(V);if(a){if(!S){throw"invalid initial state - couldn't find state: "+a+" for "+R}d.value=a;Appcelerator.Compiler.StateMachine.resetOnStateListeners();if(Appcelerator.Compiler.StateMachine.initialStateLoaders){Appcelerator.Compiler.StateMachine.initialStateLoaders.push([R,a])}}var c=null;var P={accept:function(){return Y.types},acceptScope:function(A){return d.scope=="*"||A==d.scope},onMessage:function(D,B,E,G){try{if(!c){c=Y.code.toFunction();Y=null}var F=G+":"+D;var H={messagetype:F,type:D,datatype:E,direction:G,data:B};var C=c.call(H);if(C){Appcelerator.Compiler.StateMachine.fireStateMachineChange(R,C,true)}else{C=Appcelerator.Compiler.StateMachine.getActiveState(R);if(C){Appcelerator.Compiler.StateMachine.fireStateMachineChange(R,C,null)}}}catch(A){$E("Error processing message: "+G+":"+D+" - "+Object.getExceptionDetail(A))}}};Appcelerator.Util.ServiceBroker.addListener(P);var Z=function(C,B,A){if(A){d.value=B}};Appcelerator.Compiler.StateMachine.registerStateListener(R,Z);Appcelerator.Compiler.StateMachine.fireOnStateListeners();Appcelerator.Compiler.addTrash(d,function(){if(Z){Appcelerator.Compiler.StateMachine.unregisterStateListener(Z);Z=null}Appcelerator.Util.ServiceBroker.removeListener(P)});return{"position":Appcelerator.Compiler.POSITION_REPLACE,"presentation":""}}};Appcelerator.Core.registerModule("app:statemachine",Appcelerator.Module.Statemachine)