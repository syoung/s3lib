<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">


<title>Software development magazine: UML, Agile, programming, testing, project management, jobs</title>
<meta name="keywords" content="software, software development,job, UML,use cases, software testing,IT,
project management, developer,programming,,Java,.NET, C++, Ajax, Ruby on Rails,RIA, requirements, agile, 
extreme programming, XP,Scrum, test driven development, TDD, FDD, database,configuration,methodology, web 2.0,
news, tools, planning,estimation, SEI,CMM,process,improvement,assessment,object,quality,maintenance,GUI">
<meta name="description" content="Free practical knowledge and jobs on software development and software engineering for software developers, 
testers and project managers: UML, Agile Approaches (Scrum, XP, TDD), Programming (Java, .NET, Ajax, RIA, 
Ruby on Rails), Software Testing, Databases, Software Configuration Management, Software Project Management, 
Software Process Improvement (CMM, SEI, CMMI), Software Analysis and Design, Software Quality Assurance, 
GUI Building, Programming, User Requirements, User Interface, Software Development Tools, ">
<meta name="revisit" content="15 days">
<link type="text/css" rel="stylesheet" href="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/methodsV2.css">
<link rel="shortcut icon" type="image/ico" href="http://www.methodsandtools.com/favicon.ico">
<script type="text/javascript" src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/spcjs.js"></script><script type="text/javascript" src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/fl.js"></script>
<script type="text/javascript" src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/spc.js"></script>
<title>Software Development Articles: Programming, Testing, Project, UML, Agile, Tools, Open Source, Web</title>
<meta name="keywords" content="training,software development,software engineering, software
development,engineering,developer,application,tools,CASE,metrics,information,system,
design,test,code,analysis,SEI,CMM,benchmark,process,improvement,assessment,
quality,method,programmer,programming,Java,,database,
configuration,methodology,news,function,point,project,planning,,management,
model,HTML,maintenance,GUI,consulting,IT,technology"><meta name="description" content="Going round and round and getting nowhere eXtremely fast?"><title>Going round and round and getting nowhere eXtremely fast?</title><!-- base --></head><div FirebugVersion="1.3.3" style="display: none;" id="_firebugConsole"></div><body>
<div id="maincontainer">
<div id="topsection"><div class="innertube">	  
<p class="mttitle">Free practical knowledge and jobs on software development,
software testing, quality assurance and project management</p>
<p class="pcenter">
<!--/* Site Sponsor */-->
<script type="text/javascript"><!--// <![CDATA[
    OA_show(112);
// ]]> --></script><script type="text/javascript"><!--
google_ad_client = "pub-4378464325927429";
/* 468x60 image, date de cr�ation 06/12/08 */
google_ad_slot = "7102371634";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript" src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/show_ads.js">
</script><script src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/expansion_embed.js"></script><script src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/test_domain.js"></script><script>window.google_render_ad();</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 60px; position: relative; visibility: visible; width: 468px;"><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 60px; position: relative; visibility: visible; width: 468px;"><iframe allowtransparency="true" hspace="0" id="google_ads_frame1" marginheight="0" marginwidth="0" name="google_ads_frame" src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/ads.htm" style="left: 0pt; position: absolute; top: 0pt;" vspace="0" frameborder="0" height="60" scrolling="no" width="468"></iframe></ins></ins></p><div id="beacon_6de4a33321" style="position: absolute; left: 0px; top: 0px; visibility: hidden;"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/lg.gif" alt="" style="width: 0px; height: 0px;" height="0" width="0"></div>

<div id="styletwo">
<ul>
<li><a href="http://www.methodsandtools.com/" target="_top">Home</a></li>
<li><a href="http://www.methodsandtools.com/mt/download.php">PDF Issues</a></li>
<li><a href="http://www.methodsandtools.com/facts/facts.php">Text Issues</a></li>
<li><a href="http://www.methodsandtools.com/forms/submt.php">Subscribe</a></li>
<li><a href="http://www.methodsandtools.com/archive/archive.php" class="current">Articles</a></li>
<li><a href="http://www.methodsandtools.com/dynpoll/vote.php">Polls</a></li>
<li><a href="http://www.softdevjobs.com/">Jobs</a></li>
<li><a href="http://www.methodsandtools.com/links/links.php">Links</a></li>
<li><a href="http://www.methodsandtools.com/search.php">Search</a></li>
<li><a href="http://www.methodsandtools.com/advertise.php">Advertise</a></li>
</ul>
</div></div></div>
<div id="contentwrapper">
<div id="content2c">
<div class="innertube">  



<link type="text/css" rel="stylesheet" href="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/methods.css">







<p><a href="http://www.methodsandtools.com/archive/archive.php" target="_top">Click here to
view the complete list of archived articles</a></p>
<p>This article was originally&nbsp; published in the
Winter 2002 issue of Methods &amp; Tools<br>
 <a href="http://www.methodsandtools.com/mt/download.html" target="_top">Click
here to reach PDF area</a></p>
<hr>
<p class="pcenter"><b>Going round and round and getting nowhere eXtremely fast?<br>
Another look at incremental and iterative development</b></p>

<p class="pcenter">Pascal Van Cauwenberghe</p>
<p><i>�T was brillig, and the slithy toves Did
gyre and gimble in the wabe<br>
From Jabberwocky<br>
"Through The Looking Glass" � Lewis Carrol</i></p>
<p><b>Introduction</b></p>
<p>Surprisingly many people still wonder what�s
wrong with the safe and predictable sequential phased approach, also known as
"waterfall". This despite the fact that since many years, a lot has
been written about iterative and incremental development. Still, most people
involved in software could not give you a clear definition of what those two
words mean to them. When they are able to give a definition, they often
contradict each other.</p>
<p>Into this confused world, the proponents of
"Agile Development" and especially Extreme Programming proclaim that
they go beyond "traditional" iterative and incremental development
methods.</p>
<p>What are we to do? How do we approach software
projects? How do we reach our targets reliably, quickly and efficiently? When do
we gyre, when do we gimble?</p>
<p><b>Defining our terms</b></p>
<i>
<p>"When I use a word", Humpty Dumpty
said in a rather scornful tone, "it means just what I choose it to mean �
neither more nor less".<br>
"Through The Looking Glass" � Lewis Carrol</p>
</i>
<p>We must first choose what we want our terms to
mean.</p>
<p>A phase = a period in which some clearly
defined task is performed. Just imagine we require the following phases:
Analysis, Design, Coding, Testing and Integration &amp; Deployment. Each phase
has some inputs and some outputs.</p>
<p>To iterate = to perform some task in multiple
passes. Each pass improves the result, until the result is "finished".
Also called "rework".</p>
<p>An iteration = a period in which a number of
predefined tasks are performed. The results are evaluated to feed back to the
next iteration.</p>
<p>An increment = a period after which some part
of functionality is completed to production quality level.</p>
<p>A release = some coherent set of completed
functionalities that is useful and useable to the intended users of the system.</p>
<p>With these definitions we can have a look at
different ways to organize a software project.</p>
<p><b>Different ways to plan a project</b></p>
<p><b>The waterfall � straight to the target</b></p>
<p>The sequential, phased approach, better known
as "Waterfall" is the simplest and potentially fastest approach: we
analyze the problem, design the solution, implement the code, test the code (are
we allowed to fix the coding bugs?), integrate if necessary and deploy. Done.</p>
<p>The attraction of this process model is its
simplicity: you do each of the steps and then you�re done. If you want to know
how long it takes, just add up the time required for each phase. These times are
just estimates, so your total is also an estimate. But it makes following up on
the project�s schedule easier. Once, for example, analysis and design are
done, they are done.</p>
<p>The simplicity of this model attracts two
kinds of people:</p>
<ul>
  <li>Remote stakeholders like upper level managers or end-users
    who have no need to know the exact process. They really just want to know
    when the outputs will be delivered.</li>
  <li>Teachers and educators who need to present a simplified
    model of a process as a first, simplified introduction to the subject.
    Unfortunately, it is this first approximation that sticks in the minds. Or
    do students skip all the following lectures?</li>
</ul>
<p>The spiral � iterate to incorporate feedback</p>
<p>Of course, it�s never as simple as the
waterfall process suggests: we do make errors during analysis and design. When
Walker Royce originally described his process, there were feedback loops back to
analysis and design. They were quickly "simplified" away. So, this was
the original phased, iterative approach:</p>
<ul>
  <li>Perform analysis, until you think you are ready</li>
  <li>Design, until you think you are ready. Should you find any
    problems in the analysis, feed them back to the analysis. Perform another
    iteration of the analysis, to improve it.</li>
  <li>Code the design, until ready. Should you find any problems
    in the design, feed them back. Perform another iteration of the design, to
    improve it.</li>
  <li>Test the code. Should you find any problems, start another
    iteration of the coding.</li>
  <li>Integrate and deploy. Feed back up any problems you
    encounter.</li>
</ul>
<p>In short: you go sequentially through the
phases. Some phases have more than one iteration, if we see that the output of
that phase is not perfect. In more than one sense, the waterfall is de optimist�s
interpretation of the spiral model.</p>
<p>As Boehm noted, the later a defect is caught,
the higher the cost to fix it. We are therefore encouraged to only proceed
cautiously to the next phase if the previous phase is relatively complete. As
software engineers have noted, the likelihood of finding defects becomes higher
as we come to the later phases. This is because each phase delivers a more
precise, more "testable" output that the previous phases.</p>
<p>There is one management problem with the
spiral model: how do you schedule the iterations? How many iterations will be
needed? This makes estimating and tracking the project�s progress more
difficult and unpredictable.</p>
<p><b>Iterative development � getting better
all the time</b></p>
<p>Where the spiral process views feedback and
iteration as exceptional events, iterative development assumes we will make
mistakes, we will need feedback, we will need several iterations before we get
it right.</p>
<p>In iterative, phased development we design our
project plan around the idea of iterations and fit the phases in them. For
example, we can plan to have five iterations:</p>
<ul>
  <li>In the first iteration we will do 90% analysis, 10% design</li>
  <li>In the second iteration we will do 30% analysis, 50%
    design, 20% coding</li>
  <li>In the third iteration we will do 10% analysis, 30% design,
    70% coding</li>
  <li>In the fourth iteration we will do 10% design, 50% coding,
    40% testing and bug fixing</li>
  <li>In the fifth iteration we will do 50% testing and bug
    fixing, 30% integration, 20% deployment.</li>
</ul>
<p>This process takes into account the reality
that we almost never get anything completely right the first time. At first, we
will get a lot of feedback. Gradually, with each iteration, the output from each
phase stabilizes and we need to do less rework.</p>
<p><b>Iterative development with incremental
delivery - growing software</b></p>
<p>One complaint we could have with the previous
process, is that it takes so long to see the result of the work. Indeed, the
software isn�t ready until the absolute end of the project. What if we need
the results faster? We could use iterative development with incremental
delivery, a variation on the previous process.</p>
<p>The basic idea is to release the software
several times to its users, each time with more functionality. Each release is
complete, useable and useful to its users. Each release adds more functionality,
preferably the most important functionality first. How do we schedule our
project?</p>
<ul>
  <li>First, we go through several iterations of analysis and
    design, until we are pretty sure these phases are mostly complete. We can
    then select the content and schedule of the increments to be developed. Let�s
    say we have identified three increments A, B and C, to be delivered in this
    order to the users.</li>
  <li>For increment A, we iterate through all required phases,
    until the software can be released. We expect to rework the analysis and
    design very little.</li>
  <li>For increment B, we iterate through all required phases,
    until the software can be released. We expect almost no analysis or design
    work.</li>
  <li>For increment C, we iterate through all required phases,
    until the software can be released. We expect almost no analysis or design
    work.</li>
</ul>
<p>We can picture this process as four
applications of the above process. The amount of analysis and (architectural)
design decreases in each step. The process delivers functionality after the
second, third and fourth steps.</p>
<p>How do we select the contents of the
increments? Architecture-driven processes would select the elements that have
the most impact on the architecture (and thus the design). Risk-driven processes
would select the most risky elements. Users would prefer the most useful or
urgent functionalities.</p>
<p><b>Agile software development � Extremely
incremental</b></p>
<p>Agile software methods like "Extreme
Programming" take another approach, based on the following assumptions:</p>
<ul>
  <li>You should welcome feedback and rework, in stead of trying
    to avoid it</li>
  <li>You should deliver software to your users in small
    increments and deliver functionalities in the order that the users want.</li>
</ul>
<p>The development process is then scheduled as
follows:</p>
<ul>
  <li>Decide on the length of incremental releases. All
    increments are the same length. Decide, if necessary, which ones will be
    "internal releases", only used internally for evaluation and
    feedback, and "external releases", which are released to the
    end-users.</li>
  <li>Gather an initial list of requirements. New requirements
    can be added at any time.</li>
  <li>Before the start of each increment: users (or their
    representative) prioritize the requirements and assign the requirements to
    releases. As many releases as required can be planned, but typically the
    contents of all releases, except the one being implemented, are subject to
    change.</li>
  <li>During the increment, the requirements are analyzed and
    broken down into small micro-increments. These increments are small enough
    to be fully implemented in a day or less.</li>
  <li>To implement a micro-increment, the developers analyze,
    design code, test, integrate and deploy iteratively. They iterate very
    quickly, so as to get as much as possible concrete feedback to guide their
    work.</li>
  <li>Each increment has a fixed length. If needed, scope is
    reduced (by the user) to meet the target date.</li>
</ul>
<p><b>What�s so extreme in "Extreme
Programming" ?</b></p>
<p>What�s the difference between Extreme
Programming style planning and iterative development with incremental delivery,
such as is possible with the well-known and accepted "Unified Process"
framework?</p>
<p>The assumption that you can do architecture
and design incrementally. Indeed, XP spends very little time upfront to define
an architecture and overall design. Instead, we immediately start with the first
increment to deliver functionality. All architecture and design work is done to
satisfy the requirements of the current increment. XP does design in the
following ways:</p>
<ul>
  <li>A <i>System Metaphor</i> describes an overall architecture
    and vocabulary that all participants understand and agree with. The Metaphor
    is refined iteratively over the whole project.</li>
  <i>
  </i><li><i>Test-First</i> programming designs
  the code incrementally by defining executable tests that the program unit must
  comply with.</li>
  <i>
  </i><li><i>Refactoring</i> reworks the design to
  iteratively adapt the design to changing knowledge, environment or
  requirements.</li>
  <li>Whiteboard design sessions, CRC card sessions� and other
    group design techniques.</li>
</ul>
<p>The even more controversial assumption that
you can do analysis incrementally. At the start of each increment, we only
examine the requirements that have been scheduled for this increment. XP does
analysis in the following ways:</p>
<ul>
  <li>Brief requirements, called <i>Stories</i>, are elaborated
    interactively between the development team and the story author.</li>
  <li>Requirements are formalized into executable "<i>Acceptance</i>"
    tests, which specify and verify the compliance of the software with the
    requirement.</li>
  <li>Requirements are allocated to releases using the <i>Planning
    Game</i>, where developers and customers optimize delivered value versus
    development cost.</li>
</ul>
<p>The assumption that you can deliver software
features incrementally, in whatever order yields most benefit for the customer.
If the software can be delivered incrementally, the users will get the benefit
of the functionality sooner and thus get a faster return on their investment. As
the customers can choose the delivery order, they receive the most important and
valuable features first. The use of these increments generates lots of valuable
feedback to drive the following increments.</p>

<p><b>What�s the best way to plan a project?</b></p>

<p>The short answer: it depends. It depends on
your project, your team, and your environment.</p>

<p>If the assumptions of XP hold, we can gain a
lot of benefits from working incrementally:</p>
<ul>
  <li>Early delivery of useful software.</li>
  <li>Delivery of functionality based on the value users give to
    that functionality (business value driven instead of architecture or risk
    driven).</li>
  <li>Clear, tangible feedback on progress: each increment
    delivers <i>finished, production quality</i> functionalities.</li>
  <li>Clear and regular feedback on the quality and fit of the
    software from the users to the development team.</li>
  <li>The ability to adapt the project plan.</li>
  <li>Clear scheduling and predictable delivery</li>
  <li>The development of the simplest possible system that
    satisfies the requirements, without any unnecessary adornments and
    complexity.</li>
</ul>

<p>What are the dangers of this approach?</p>
<ul>
  <li>By only looking at small pieces (increments) of the
    software, we may have to do massive rework, which <i>might</i> have been
    avoided if we analyzed or designed the whole system correctly.</li>
  <li>We might "paint ourselves in a corner": get a
    system which is incapable of supporting some new requirement.</li>
  <li>We may be unable to add "global" requirements,
    such as globalization, performance, and security� A typical example is
    trying to retrofit "security" to an application that was not
    designed with this requirement in mind.</li>
  <li>We might go slower because we have to restart analysis and
    design sessions for each increment, instead of doing it once at the start of
    the project.</li>
</ul>

<p>So, it�s not so easy to define how we should
organize our projects.</p>

<p><b>A few heuristics</b></p>

<p>If your requirements are volatile or
incomplete, if the environment changes or if you wish to be able to anticipate
to future events, work incrementally. If the requirements and environment are
stable, you can optimize your process by looking at all the requirements
upfront. When we use an investment analogy, we can compare agile scheduling with
options, where we pay a small investment to be able to postpone our
buying/selling decisions, versus shares, where we make the full investment
upfront. The potential gains from shares are higher (because we don�t pay the
price of the option), but the risk is also higher.</p>

<p>If you are not familiar with the domain, haven�t
built any similar architecture, work incrementally. Use the feedback to design
your system and to avoid unnecessary complexity. If you�ve done lots of
similar systems, you can do more upfront. Still, you can always use the feedback
to keep your system simple.</p>

<p>If you can�t deliver incrementally, don�t
deliver incrementally. But, even if you can�t deliver incrementally to your
final user, you might deliver incrementally to internal users, such as QA,
product managers� And even if you can�t do that, deliver incrementally
within your team. That way you can still get the benefit of early feedback.</p>

<p>If you know a requirement is going to be more
difficult to work on if you only tackle it later, work on it now. This can
happen with "global" properties of software systems like localization,
scalability, and security. You can still get the benefit of business value
driven scheduling for most requirements if you take those few exceptions into
account: "Did you want security with that, Sir? With security, this feature
will cost you X. Without, it will cost you Y. If you wish to add security later,
it will cost you Z." Iterative (re) design techniques like refactoring and
the emphasis on simplicity does help to keep your software "soft",
more malleable, more accepting of changes.</p>

<p>If your team is big, do enough work upfront
with a small team so that you can decompose the work on the system on the basis
of a reasonable (but not perfect or final) architecture.</p>

<p><b>My approach</b></p>

<p>I prefer to err on the side of doing too
little work upfront, rather than too much. That�s because I�ve learned some
things by applying Agile processes:</p>
<ul>
  <li>If you use simple designs and keep them simple by
    refactoring you can keep your software so changeable that you can accept
    most requirements without much trouble. On a well-functioning XP team it
    feels as if you could go on forever adding features, if only the users could
    keep coming up with them.</li>
  <li>If you are afraid to change something, because you fear the
    refactoring will be a lot of work and break things, do it often. For
    example, in my team we�ve learned to do database refactorings often,
    updating our schema every few days, with a minimum of work and without our
    users noticing.</li>
  <li>No matter how well you know the domain or the architecture,
    you will learn new insights from feedback. The most important thing I�ve
    learned is to write code that is a lot simpler than it used to be.</li>
  <li>Customers are uneasy with the apparently complex or chaotic
    scheduling of iterative and incremental processes. They much prefer the
    safety and simplicity of a waterfall process. If you can involve them and
    have intermediate incremental deliveries, within the overall
    "waterfall", they quickly appreciate the feedback and steering
    power that you give them. And they will never work any other way again.</li>
  <li>Keep your team as small as possible. A smaller the team
    requires less communication overhead, less upfront planning and
    decomposition and gives more agility to respond to changes.</li>
  <li>The assumptions of XP might not hold completely, but often
    it�s close enough. For example we can assume that most requirements can be
    analysed, planned and implemented relatively independently so that users are
    free to schedule them as they see fit. We can handle those exceptions, where
    there are dependencies or risks, appropriately, so that we have the best
    possible schedule from both a functional and technical standpoint.</li>
</ul>
<p><b>Conclusion</b></p>
<p>Incremental software development, with short
increments, is a very useful technique to reduce project risk and to deliver
value faster to users. Each release provides opportunities for useful feedback
and replanning, so that the final product meets the users� real requirements.
The project is at its most "agile" when we consider only one increment
at a time.</p>
<p>We must balance this with some forward-looking
actions, to avoid some pitfalls and to go faster. We can plan and implement
several increments or perform some upfront analysis and design before starting
the increments.</p>
<p>When shouldn�t we work completely
incrementally?</p>
<ul>
  <li>When we have a lot of knowledge and experience in the
    domain, the architecture and the environment. We can "invest" our
    knowledge to enable us to take the "best road" to our destination.</li>
  <li>We think the cost of implementing the requirement will go
    up sharply as the project progresses.</li>
</ul>
<p>There are a few heuristics and you should
discover more. You must choose the right combinations, based on your experience,
your environment, and your task. And you must always be ready to learn from
feedback and to adapt your plan and your process accordingly.</p>

<p><a href="http://www.methodsandtools.com/archive/archive.php">Back to the archive list</a></p>
</div></div></div>
<div id="leftsp">
<div class="innertube">
<table border="0" width="125">
  <tbody><tr>
    <td width="125">

<!--/* Cosponsor 1 */-->
<script type="text/javascript"><!--// <![CDATA[
    OA_show(113);
// ]]> --></script><a href="http://www.methodstools.com/share/www/delivery/ck.php?oaparams=2__bannerid=167__zoneid=113__cb=98b8b05cf2__oadest=http://www.e-Valid.com/Promotion/ClickThrough/MethodsTools/download.eValid.html" target="_top"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/evalid-2009ad-1-125x125.gif" alt="In-Browser Functional, Performance, Timing, &amp; Load Testing" title="In-Browser Functional, Performance, Timing, &amp; Load Testing" border="0" height="125" width="125"></a><div id="beacon_98b8b05cf2" style="position: absolute; left: 0px; top: 0px; visibility: hidden;"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/lg_005.gif" alt="" style="width: 0px; height: 0px;" height="0" width="0"></div>

    </td>
  </tr>
  <tr>
    <td width="125">

<!--/* Cosponsor 2 */-->
<script type="text/javascript"><!--// <![CDATA[
    OA_show(114);
// ]]> --></script><a href="http://www.methodstools.com/share/www/delivery/ck.php?oaparams=2__bannerid=166__zoneid=114__cb=0ebcf6fbdd__oadest=http://www.technosolutions.com/topteam_requirements_management.html" target="_top"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/technosolutions_topteam_analyst_125.gif" alt="View Online demo, download instant FREE trial now!" title="View Online demo, download instant FREE trial now!" border="0" height="125" width="125"></a><div id="beacon_0ebcf6fbdd" style="position: absolute; left: 0px; top: 0px; visibility: hidden;"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/lg_006.gif" alt="" style="width: 0px; height: 0px;" height="0" width="0"></div>

    </td>
  </tr>
  <tr>
    <td width="125">
    
<!--/* Cosponsor 3 */-->    
<script type="text/javascript"><!--// <![CDATA[
    OA_show(115);
// ]]> --></script><a href="http://www.methodstools.com/share/www/delivery/ck.php?oaparams=2__bannerid=165__zoneid=115__cb=bd97d8e418__oadest=http://www.mks.com/products/resource_library" target="_top"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/mks125x125.gif" alt="Access MKS Resource Library" title="Access MKS Resource Library" border="0" height="125" width="125"></a><div id="beacon_bd97d8e418" style="position: absolute; left: 0px; top: 0px; visibility: hidden;"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/lg_007.gif" alt="" style="width: 0px; height: 0px;" height="0" width="0"></div>

    </td>
  </tr>
  <tr>
    <td width="125">
   
<!--/* Cosponsor 4 */-->
<script type="text/javascript"><!--// <![CDATA[
    OA_show(116);
// ]]> --></script><a href="http://www.methodstools.com/share/www/delivery/ck.php?oaparams=2__bannerid=187__zoneid=116__cb=fc0154e2ef__oadest=http://www.inflectra.com/SpiraPlan?Source=SoftDevTools&amp;Campaign=SpiraPlan" target="_top"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/spiraplan-125x125-v1.gif" alt="SpiraPlan: Accelerating Project Delivery" title="SpiraPlan: Accelerating Project Delivery" border="0" height="125" width="125"></a><div id="beacon_fc0154e2ef" style="position: absolute; left: 0px; top: 0px; visibility: hidden;"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/lg_003.gif" alt="" style="width: 0px; height: 0px;" height="0" width="0"></div>

    </td>
  </tr>
  <tr>
    <td width="125">
   
<!--/* Cosponsor 5 */-->
<script type="text/javascript"><!--// <![CDATA[
    OA_show(117);
// ]]> --></script><a href="http://www.methodstools.com/share/www/delivery/ck.php?oaparams=2__bannerid=185__zoneid=117__cb=f8e49a2ed3__oadest=http://www.sqe.com/go?BSCE09M&amp;Tban" target="_top"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/bsce09-125x125.gif" alt="Special Promotions and Discounts Going on NOW!" title="Special Promotions and Discounts Going on NOW!" border="0" height="125" width="125"></a><div id="beacon_f8e49a2ed3" style="position: absolute; left: 0px; top: 0px; visibility: hidden;"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/lg_004.gif" alt="" style="width: 0px; height: 0px;" height="0" width="0"></div>

   </td>
  </tr>
</tbody></table></div></div>
<div id="footer">
<p class="pcenter">
<script type="text/javascript"><!--// <![CDATA[
    OA_show(118);
// ]]> --></script><script type="text/javascript"><!--
google_ad_client = "pub-4378464325927429";
/* 728x90 Mixed, date de création 30/01/09 */
google_ad_slot = "1804757456";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/show_ads.js">
</script><script>window.google_render_ad();</script><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: inline-table; height: 90px; position: relative; visibility: visible; width: 728px;"><ins style="border: medium none ; margin: 0pt; padding: 0pt; display: block; height: 90px; position: relative; visibility: visible; width: 728px;"><iframe allowtransparency="true" hspace="0" id="google_ads_frame2" marginheight="0" marginwidth="0" name="google_ads_frame" src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/ads_002.htm" style="left: 0pt; position: absolute; top: 0pt;" vspace="0" frameborder="0" height="90" scrolling="no" width="728"></iframe></ins></ins></p><div id="beacon_84d483e686" style="position: absolute; left: 0px; top: 0px; visibility: hidden;"><img src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/lg_002.gif" alt="" style="width: 0px; height: 0px;" height="0" width="0"></div>


<!-- copyright -->
<p class="pcenter">
Copyright © 1995-2009 <a href="http://www.martinig.ch/" target="_top">Martinig &amp; Associates</a> | 
<a href="http://www.methodsandtools.com/partners.php" target="_top">Partner Web Sites</a> | 
<a href="http://www.methodsandtools.com/advertise.php" target="_top">Advertise with Methods &amp; Tools</a> |
<a href="http://www.methodsandtools.com/contact/contact.html" target="_top">Contact</a>
</p>
<p class="copyright">
<b>Resources: </b>
<a href="http://www.softdevtools.com/" target="_top">SD Tools</a> | 
<a href="http://www.softdevarticles.com/" target="_top">SD Articles</a> | 
<a href="http://www.softdevlinks.com/" target="_top">SD Directory</a> | 
<a href="http://www.softdevtube.com/" target="_top">SD Videos</a> | 
<a href="http://www.softdevconferences.com/" target="_top">SD Conferences</a> | 
<a href="http://www.softdevnews.com/" target="_top">SD News</a> | 
<a href="http://blog.martinig.ch/" target="_top">Editor's Blog</a>
</p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="Going%20round%20and%20round%20and%20getting%20nowhere%20eXtremely%20fast_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2380574-1");
pageTracker._initData();
pageTracker._trackPageview();
</script></div></div>
</body></html>