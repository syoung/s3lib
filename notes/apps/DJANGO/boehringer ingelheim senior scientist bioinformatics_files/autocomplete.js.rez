// $Id: autocomplete.js,v 1.8 2011-04-14 22:20:59 mbarnes Exp $

/**
* This library is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this library; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*
* ï¿½ Copyright 2005 Richard Heyes
*/

/**
* Global vars
*/
__AutoComplete = new Array();

// Basic UA detection
__AutoComplete_isIE = Functions_isIE() ? true : false;
__AutoComplete_isGecko = navigator.userAgent.toLowerCase().indexOf('gecko') != -1;
__AutoComplete_isOpera = navigator.userAgent.toLowerCase().indexOf('opera') != -1;

/**
 * OLD CONSTRUCTOR!! Only kept for fields where ajax autocomplete is
 * nigh-impossible or just impractical
 *
 * @param string formElement Name of form element to attach to
 * @param array  data        Array of strings of which to use as the autocomplete data
 */
AutoComplete_Create_Legacy = function(id, data) {
  // find our element
  var elem = AutoComplete_findElement(id);
  // optional arguments
  var maxitems = (arguments[2] != null) ? arguments[2] : null;
  var bgcolor = (arguments[3] != null) ? arguments[3] : null;
  __AutoComplete[id] = {'data':data,
                        'isVisible':false,
                        'element':elem,
                        'dropdown':null,
                        'highlighted':null,
                        'version':1};
  AutoComplete_Continue_Create(id, bgcolor, maxitems);
}

/**
 * Attachs the autocomplete object to a form element. Sets
 * onkeypress event on the form element.
 *
 * @param string formElement Name of form element to attach to
 * @param array  ajaxPage    SiteNode to get autocomplete data from
 */
AutoComplete_Create = function(id, ajaxPage) {
  // find our element
  var elem = AutoComplete_findElement(id);

  // optional arguments
  var maxitems = (arguments[2] != null) ? arguments[2] : null;
  var bgcolor = (arguments[3] != null) ? arguments[3] : null;

  __AutoComplete[id] = {'ajaxPage':ajaxPage,
                        'isVisible':false,
                        'element':elem,
                        'dropdown':null,
                        'highlighted':null,
                        'version':2};

  AutoComplete_Continue_Create(id, bgcolor, maxitems);
}

/**
 * Attachs the autocomplete object to a form element. Sets
 * onkeypress event on the form element.
 *
 * @param string formElementName  of form element to attach to
 * @param array  ajaxPage    SiteNode to get autocomplete data from,
 */
AutoComplete_Create_TypeEncodings = function(formElementName, ajaxPage, trName) {
  // find our element
  var formElement = AutoComplete_findElement(formElementName);

  // optional arguments
  var maxitems = (arguments[3] != null) ? arguments[3] : null;
  var bgcolor = (arguments[4] != null) ? arguments[4] : null;

  __AutoComplete[formElementName] = { 'ajaxPage':ajaxPage,
                                      'trName':trName,
                                      'element':formElement,
                                      'isVisible':false,
                                      'dropdown':null,
                                      'highlighted':null,
                                      'version':3 };

  AutoComplete_Continue_Create(formElementName, bgcolor, maxitems);
}

AutoComplete_Continue_Create = function(id, bgcolor, maxitems) {
  __AutoComplete[id]['element'].setAttribute('autocomplete', 'off');
  __AutoComplete[id]['element'].onkeydown  = function(e) {return AutoComplete_KeyDown(this.getAttribute('name'), e);}
  __AutoComplete[id]['element'].onkeyup    = function(e) {return AutoComplete_KeyUp(this.getAttribute('name'), e);}
  __AutoComplete[id]['element'].onkeypress = function(e) {if (!e) e = window.event; if (e.keyCode == 13 || __AutoComplete_isOpera) return false;}
  __AutoComplete[id]['element'].ondblclick = function() {AutoComplete_ShowDropdown(this.getAttribute('name'));}
  __AutoComplete[id]['element'].onclick    = function(e) {if (!e) e = window.event; e.cancelBubble = true; e.returnValue = false;}

  // Hides the dropdowns when document clicked
  var docClick = function(evt) {
    var tgt = evt.target? evt.target : evt.srcElement;
    for (id in __AutoComplete) {
      if (tgt != __AutoComplete[id].dropdown)
        AutoComplete_HideDropdown(id);
    }
  }

  if (document.addEventListener) {
    document.addEventListener('click', docClick, false);
  }
  else if (document.attachEvent) {
    document.attachEvent('onclick', docClick, false);
  }

  // Max number of items shown at once
  if (maxitems != null) {
    __AutoComplete[id]['maxitems'] = maxitems;
    __AutoComplete[id]['firstItemShowing'] = 0;
    __AutoComplete[id]['lastItemShowing']  = maxitems - 1;
  }

  // Default background color
  __AutoComplete[id]['bgcolor'] = '#055298';
  if (bgcolor != null) {
    __AutoComplete[id]['bgcolor'] = bgcolor;
  }

  AutoComplete_CreateDropdown(id);

  // Prevent select dropdowns showing thru
  if (__AutoComplete_isIE) {
    __AutoComplete[id]['iframe'] = document.createElement('iframe');
    __AutoComplete[id]['iframe'].id = id +'_iframe';
    __AutoComplete[id]['iframe'].style.position = 'absolute';
    __AutoComplete[id]['iframe'].style.top = '0';
    __AutoComplete[id]['iframe'].style.left = '0';
    __AutoComplete[id]['iframe'].style.width = '0px';
    __AutoComplete[id]['iframe'].style.height = '0px';
    Site_layerOnZIndex(__AutoComplete[id]['iframe'], -2);
    __AutoComplete[id]['iframe'].style.visibility = 'hidden';

    document.body.appendChild(__AutoComplete[id]['iframe']);
  }
}

/**
 * Creates the dropdown layer
 *
 * @param string id The form elements id. Used to identify the correct dropdown.
 */
AutoComplete_CreateDropdown = function(id) {
  var left  = AutoComplete_GetLeft(__AutoComplete[id]['element']);
  var top   = AutoComplete_GetTop(__AutoComplete[id]['element']) + __AutoComplete[id]['element'].offsetHeight;
  var width = __AutoComplete[id]['element'].offsetWidth;

  __AutoComplete[id]['dropdown'] = document.createElement('div');
  __AutoComplete[id]['dropdown'].className = 'portal-select'; // Don't use setAttribute()

  document.body.appendChild(__AutoComplete[id]['dropdown']);

  // Position it
  __AutoComplete[id]['dropdown'].style.left       = left + 'px';
  __AutoComplete[id]['dropdown'].style.top        = top + 'px';
  __AutoComplete[id]['dropdown'].style.width      = width + 'px';
  Site_layerOnZIndex(__AutoComplete[id]['dropdown']);
  __AutoComplete[id]['dropdown'].style.visibility = 'hidden';
  // Style it
  __AutoComplete[id]['dropdown'].style.position = 'absolute';
  __AutoComplete[id]['dropdown'].style.overflow = 'auto';
  __AutoComplete[id]['dropdown'].style.overflowX = 'hidden';
  __AutoComplete[id]['dropdown'].style.border = '1px solid black';
  __AutoComplete[id]['dropdown'].style.cursor = 'default';
  __AutoComplete[id]['dropdown'].style.backgroundColor = '#ffffff';
}

/**
 * Validate that the value is one of the legal values
 * jmt 2/2/11 - Probably not used anymore, but to be safe it's left in
 *
 * @param id
 *
 * @return true if valid, false otherwise
 */
AutoComplete_validate = function(id, msg) {
  var value = __AutoComplete[id]['element'].value;
  for (var i = 0; i < __AutoComplete[id]['data'].length; i++) {
    if (value == __AutoComplete[id]['data'][i])
      return true;
  }
  alert(msg);
  return false;
}

/**
 * Find our element - id is really name then find the input or textarea tag with that name
 *
 * @param string id The form elements id. Used to identify the correct dropdown.
 */
AutoComplete_findElement = function(id) {
  var elements = document.getElementsByName(id);
  for (var i = 0; i < elements.length; i++) {
    if (elements[i].tagName.toUpperCase() == 'INPUT' || elements[i].tagName.toUpperCase() == 'TEXTAREA')
      return elements[i];
  }
  return null;
}

/**
 * Gets left coord of given element
 *
 * @param object element The element to get the left coord for
 */
AutoComplete_GetLeft = function(element) {
  var curNode = element;
  var left    = 0;

  do {
    left += curNode.offsetLeft;
    curNode = curNode.offsetParent;

  } while (curNode.tagName.toLowerCase() != 'body');

  curNode = element;

  do {
    left -= curNode.scrollLeft;
    curNode = curNode.parentNode;

  } while (curNode.tagName.toLowerCase() != 'body');

  return left;
}


/**
 * Gets top coord of given element
 *
 * @param object element The element to get the top coord for
 */
AutoComplete_GetTop = function(element) {
  var curNode = element;
  var top    = 0;

  do {
    top += curNode.offsetTop;
    curNode = curNode.offsetParent;

  } while (curNode.tagName.toLowerCase() != 'body');

  curNode = element;

  do {
    top -= curNode.scrollTop;
    curNode = curNode.parentNode;

  } while (curNode.tagName.toLowerCase() != 'body');

  return top;
}

/**
 * Shows the dropdown layer
 *
 * @param string id The form elements id. Used to identify the correct dropdown.
 */
AutoComplete_ShowDropdown = function(id) {
  AutoComplete_HideAll(id);

  var value = __AutoComplete[id]['element'].value.toUpperCase();
  var toDisplay = new Array();
  var newDiv    = null;
  var text      = null;
  var numItems  = __AutoComplete[id]['dropdown'].childNodes.length;
  
  // In the new case, we have arrived here after creating the children
  // Therefore, all we care about is finding if any are there
  if (__AutoComplete[id]['version'] == 2 || __AutoComplete[id]['version'] == 3) {
	  toDisplay = new Array( numItems );
    if (numItems == 0) {
      AutoComplete_HideDropdown(id);
      return;
    }
  } else {
	// In the old case, we arrive here directly, and have to do the whole list-parsing deal  
	
    // Remove all child nodes from dropdown
    while (__AutoComplete[id]['dropdown'].childNodes.length > 0) {
      __AutoComplete[id]['dropdown'].removeChild(__AutoComplete[id]['dropdown'].childNodes[0]);
    }
  
    // Go thru data searching for matches
    // MEF 4/6/2010 -- changed 'begins with' to 'contains'
    for (i = 0; i < __AutoComplete[id]['data'].length; ++i) {
      if (__AutoComplete[id]['data'][i].toUpperCase().indexOf(value) != -1) {
        toDisplay[toDisplay.length] = __AutoComplete[id]['data'][i];
      }
    }
  
    // No matches?
    if (toDisplay.length == 0) {
      AutoComplete_HideDropdown(id);
      return;
    }
  
    // Add data to the dropdown layer
    for (i = 0; i < toDisplay.length; ++i) {
      newDiv = document.createElement('div');
      newDiv.className = 'portal-cel'; // Don't use setAttribute()
      newDiv.setAttribute('id', 'portal-autocomplete_item_' + i);
      newDiv.setAttribute('index', i);
      newDiv.style.zIndex = 10000;
      newDiv.style.padding = '1px';
      newDiv.style.paddingLeft = '5px';
      newDiv.style.width = '100%';
  
       // Scrollbars are on display ?
      if (toDisplay.length > __AutoComplete[id]['maxitems'] && navigator.userAgent.indexOf('MSIE') == -1) {
        newDiv.style.width = __AutoComplete[id]['element'].offsetWidth - 22 + 'px';
      }
 
      newDiv.onmouseover = function() { AutoComplete_HighlightItem(__AutoComplete[id]['element'].getAttribute('name'), this.getAttribute('index')); };
      newDiv.onclick     = function() {AutoComplete_SetValue(__AutoComplete[id]['element'].getAttribute('name')); AutoComplete_HideDropdown(__AutoComplete[id]['element'].getAttribute('name'));}

      text   = document.createTextNode(toDisplay[i]);
      newDiv.appendChild(text);

      __AutoComplete[id]['dropdown'].appendChild(newDiv);
  	}
  	
  }

  // Too many items?
  if (toDisplay.length > __AutoComplete[id]['maxitems']) {
    __AutoComplete[id]['dropdown'].style.height = (__AutoComplete[id]['maxitems'] * 15) + 2 + 'px';
  }
  else {
    __AutoComplete[id]['dropdown'].style.height = '';
  }

  /**
  * Set left/top in case of document movement/scroll/window resize etc
  */
  __AutoComplete[id]['dropdown'].style.left = AutoComplete_GetLeft(__AutoComplete[id]['element']);
  __AutoComplete[id]['dropdown'].style.top  = AutoComplete_GetTop(__AutoComplete[id]['element']) + __AutoComplete[id]['element'].offsetHeight;

  // Show the iframe for IE
  if (__AutoComplete_isIE) {
    __AutoComplete[id]['iframe'].style.top    = __AutoComplete[id]['dropdown'].style.top;
    __AutoComplete[id]['iframe'].style.left   = __AutoComplete[id]['dropdown'].style.left;
    __AutoComplete[id]['iframe'].style.width  = __AutoComplete[id]['dropdown'].offsetWidth;
    __AutoComplete[id]['iframe'].style.height = __AutoComplete[id]['dropdown'].offsetHeight;

    __AutoComplete[id]['iframe'].style.visibility = 'visible';
  }

  // Show dropdown
  if (!__AutoComplete[id]['isVisible']) {
    __AutoComplete[id]['dropdown'].style.visibility = 'visible';
    __AutoComplete[id]['isVisible'] = true;
  }

  // If now showing less items than before, reset the highlighted value
  if (__AutoComplete[id]['dropdown'].childNodes.length != numItems) {
    __AutoComplete[id]['highlighted'] = null;
  }
}

/**
 * Hides all dropdowns
 */
AutoComplete_HideAll = function(id) {
  AutoComplete_HideDropdown(id);
}

/**
 * Hides the dropdown layer
 *
 * @param string id The form elements id. Used to identify the correct dropdown.
 */
AutoComplete_HideDropdown = function(id) {
  if (__AutoComplete[id]['iframe']) {
    __AutoComplete[id]['iframe'].style.visibility = 'hidden';
  }

  if (__AutoComplete[id]['dropdown']) {
    __AutoComplete[id]['dropdown'].style.visibility = 'hidden';
    __AutoComplete[id]['highlighted'] = null;
    __AutoComplete[id]['isVisible']   = false;
  }
}

/**
 * Highlights a specific item
 *
 * @param string id    The form elements id. Used to identify the correct dropdown.
 * @param int    index The index of the element in the dropdown to highlight
 */
AutoComplete_HighlightItem = function(id, index) {
  if (__AutoComplete[id]['dropdown'].childNodes[index]) {
    for (var i = 0; i < __AutoComplete[id]['dropdown'].childNodes.length; ++i) {
      if (__AutoComplete[id]['dropdown'].childNodes[i].className == 'portal-selected') {
        __AutoComplete[id]['dropdown'].childNodes[i].className = 'portal-select';
      }
    }

    __AutoComplete[id]['dropdown'].childNodes[index].className = 'portal-selected';
    __AutoComplete[id]['highlighted'] = index;
  }
}

/**
 * Highlights the menu item with the given index
 *
 * @param string id    The form elements id. Used to identify the correct dropdown.
 * @param int    index The index of the element in the dropdown to highlight
 */
AutoComplete_Highlight = function(id, index) {
  // Out of bounds checking
  if (index == 1 && __AutoComplete[id]['highlighted'] == __AutoComplete[id]['dropdown'].childNodes.length - 1) {
    __AutoComplete[id]['dropdown'].childNodes[__AutoComplete[id]['highlighted']].className = 'portal-select';
    __AutoComplete[id]['highlighted'] = null;
  }
  else if (index == -1 && __AutoComplete[id]['highlighted'] == 0) {
    __AutoComplete[id]['dropdown'].childNodes[0].className = 'portal-select';
    __AutoComplete[id]['highlighted'] = __AutoComplete[id]['dropdown'].childNodes.length;
  }

  // Nothing highlighted at the moment
  if (__AutoComplete[id]['highlighted'] == null) {
    __AutoComplete[id]['dropdown'].childNodes[0].className = 'portal-selected';
    __AutoComplete[id]['highlighted'] = 0;
  }
  else {
    if (__AutoComplete[id]['dropdown'].childNodes[__AutoComplete[id]['highlighted']]) {
      __AutoComplete[id]['dropdown'].childNodes[__AutoComplete[id]['highlighted']].className = 'portal-select';
    }

    var newIndex = __AutoComplete[id]['highlighted'] + index;
    if (__AutoComplete[id]['dropdown'].childNodes[newIndex]) {
       __AutoComplete[id]['dropdown'].childNodes[newIndex].className = 'portal-selected';
      __AutoComplete[id]['highlighted'] = newIndex;
    }
  }
}

/**
 * Sets the input to a given value
 *
 * @param string id    The form elements id. Used to identify the correct dropdown.
 */
AutoComplete_SetValue = function(id) {
  var value = __AutoComplete[id]['dropdown'].childNodes[__AutoComplete[id]['highlighted']].innerHTML;
  __AutoComplete[id]['element'].value = value;
}

/**
 * Checks if the dropdown needs scrolling
 *
 * @param string id    The form elements id. Used to identify the correct dropdown.
 */
AutoComplete_ScrollCheck = function(id) {
  // Scroll down, or wrapping around from scroll up
  if (__AutoComplete[id]['highlighted'] > __AutoComplete[id]['lastItemShowing']) {
    __AutoComplete[id]['firstItemShowing'] = __AutoComplete[id]['highlighted'] - (__AutoComplete[id]['maxitems'] - 1);
    __AutoComplete[id]['lastItemShowing']  = __AutoComplete[id]['highlighted'];
  }

  // Scroll up, or wrapping around from scroll down
  if (__AutoComplete[id]['highlighted'] < __AutoComplete[id]['firstItemShowing']) {
    __AutoComplete[id]['firstItemShowing'] = __AutoComplete[id]['highlighted'];
    __AutoComplete[id]['lastItemShowing']  = __AutoComplete[id]['highlighted'] + (__AutoComplete[id]['maxitems'] - 1);
  }

  __AutoComplete[id]['dropdown'].scrollTop = __AutoComplete[id]['firstItemShowing'] * 15;
}

/**
 * Function which handles the keypress event
 *
 * @param string id    The form elements id. Used to identify the correct dropdown.
 */
AutoComplete_KeyDown = function(id) {
  // Mozilla
  if (arguments[1] != null) {
    event = arguments[1];
  }

  var keyCode = event.keyCode;

  switch (keyCode) {

    // Return/Enter
    case 13:
      if (__AutoComplete[id]['highlighted'] != null) {
        AutoComplete_SetValue(id);
        AutoComplete_HideDropdown(id);
      }

      event.returnValue = false;
      event.cancelBubble = true;
      break;

    // Escape
    case 27:
      AutoComplete_HideDropdown(id);
      event.returnValue = false;
      event.cancelBubble = true;
      break;

    // Up arrow
    case 38:
      if (!__AutoComplete[id]['isVisible']) {
        AutoComplete_ShowDropdown(id);
      }

      AutoComplete_Highlight(id, -1);
      AutoComplete_ScrollCheck(id, -1);
      return false;
      break;

    // Tab
    case 9:
      if (__AutoComplete[id]['isVisible']) {
        AutoComplete_HideDropdown(id);
      }
      return;

    // Down arrow
    case 40:
      if (!__AutoComplete[id]['isVisible']) {
        AutoComplete_ShowDropdown(id);
      }

      AutoComplete_Highlight(id, 1);
      AutoComplete_ScrollCheck(id, 1);
      return false;
      break;
  }
}

/**
 * Function which handles the keyup event
 *
 * @param string id    The form elements id. Used to identify the correct dropdown.
 */
AutoComplete_KeyUp = function(id) {
  // Mozilla
  if (arguments[1] != null) {
    event = arguments[1];
  }

  var keyCode = event.keyCode;

  switch (keyCode) {
    case 13:
      event.returnValue = false;
      event.cancelBubble = true;
      break;

    case 27:
      AutoComplete_HideDropdown(id);
      event.returnValue = false;
      event.cancelBubble = true;
      break;

    case 38:
    case 40:
      return false;
      break;

    default:
      if (__AutoComplete[id]['version'] == 3)
        AutoComplete_GetNewTypeEncodings(id,
    	                                   __AutoComplete[id]['ajaxPage'],
    	                                   __AutoComplete[id]['trName'],
                                         __AutoComplete[id]['element'].value);
      else if (__AutoComplete[id]['version'] == 2)
        AutoComplete_GetNewValues(id,
    	                            __AutoComplete[id]['ajaxPage'],
    	  						              null,
    	  						              null,
                                  __AutoComplete[id]['element'].value);
      else
      	AutoComplete_ShowDropdown(id);
      break;
  }
}

/**
 * Returns whether the dropdown is visible
 *
 * @param string id    The form elements id. Used to identify the correct dropdown.
 */
AutoComplete_isVisible = function(id) {
  return __AutoComplete[id]['dropdown'].style.visibility == 'visible';
}

AutoComplete_GetNewValues = function(id, provider, standByProvider, callback, vargs) {
  if (eval("window.Ajax_applicationURL")) {
    // now invoke 'provider'
    var url = Ajax_url(provider);
    var argi = (!vargs || (typeof vargs == 'string'))? 4 : 0;
    var args = vargs;
    var pars = "x=" + Math.random();
    var oncomplete = function(req) {
      AutoComplete_GenerateDropdown(id, req);
    };
    pars += '&_curVal=' + encodeURIComponent(vargs);
    var cookies = new Array();
    cookies[0] = "Cookie";
    cookies[1] = document.cookie;
    var ajax = new Ajax.Request(url, {method: 'post', onComplete: oncomplete, parameters: pars, requestHeaders: cookies} );
  }
}

AutoComplete_GetNewTypeEncodings = function(id, provider, trName, vargs) {
  if (eval("window.Ajax_applicationURL")) {
    // now invoke 'provider'
    var url = Ajax_url(provider);
    var oncomplete = function(req) {
      AutoComplete_GenerateDropdown(id, req);
    };
    var pars = "x=" + Math.random();
    if (trName) pars += '&_trName=' + encodeURIComponent(trName);
    pars += '&_curVal=' + encodeURIComponent(vargs);
    var cookies = new Array();
    cookies[0] = "Cookie";
    cookies[1] = document.cookie;
    var ajax = new Ajax.Request(url, {method: 'post', onComplete: oncomplete, parameters: pars, requestHeaders: cookies} );
  }
}

AutoComplete_GenerateDropdown = function(id, req) {
  var theDiv = __AutoComplete[id]['dropdown'];
  theDiv.innerHTML = "";
  
  var text = req.responseText;
  var json = eval("(" + text + ")");
  
  var i = 0;

  for (el in json) {
    newDiv = document.createElement('div');
    newDiv.className = 'portal-cel'; // Don't use setAttribute()
    newDiv.setAttribute('id', 'portal-autocomplete_item_' + i);
    newDiv.setAttribute('index', i);
    newDiv.style.zIndex = 10000;
    newDiv.style.padding = '1px';
    newDiv.style.paddingLeft = '5px';
    newDiv.style.width = '100%';
  
  	// Scrollbars are on display ?
  	if (i > __AutoComplete[id]['maxitems'] && navigator.userAgent.indexOf('MSIE') == -1) {
      newDiv.style.width = __AutoComplete[id]['element'].offsetWidth - 22 + 'px';
  	}

    newDiv.onmouseover = function() { AutoComplete_HighlightItem(__AutoComplete[id]['element'].getAttribute('name'), this.getAttribute('index')); };
    newDiv.onclick     = function() {AutoComplete_SetValue(__AutoComplete[id]['element'].getAttribute('name')); AutoComplete_HideDropdown(__AutoComplete[id]['element'].getAttribute('name'));}

    text = document.createTextNode(json[el]);
    newDiv.appendChild(text);

    __AutoComplete[id]['dropdown'].appendChild(newDiv);
    
    i++;
  }
  
  AutoComplete_ShowDropdown(id);
}