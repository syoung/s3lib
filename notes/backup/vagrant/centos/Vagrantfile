# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.

  config.vm.box = "centos-6.4-guest-4.3.2"
  config.vm.hostname = "vagrant-centos2.example.com"


#  config.vm.provision :puppet do |puppet|
#	#puppet.module_path = %w(/etc/puppet/modules), 
#	puppet.manifests_path = %w(/etc/puppet/manifests)
#
#    # fix `fqdn_rand` error
#    puppet.facter = { 'fqdn' => config.vm.hostname }
#  end
  
  # SHARED FILESYSTEMS
  #config.vm.synced_folder "/mnt", "/mnt", create: true
  #config.vm.synced_folder "/mnt/repos/private/syoung/notes", "/home/vagrant/notes",
  #owner: "root", group: "root"

  config.vm.synced_folder "../../../home/syoung/notes", "/home/vagrant/notes"
  #, mount_options: ["dmode=755", "fmode=755"]

  config.vm.synced_folder "../../../agua", "/agua"
  config.vm.synced_folder "../../../mnt", "/mnt"
 
#  config.vm.synced_folder "../../../aguadev", "/aguadev"

  #config.vm.synced_folder "../../../mnt/repos/private/syoung/bioappsdev", "/agua/apps/bioapps"

  #,
  #owner: "apache", group: "apache"
  #, mount_options: ["dmode=755", "fmode=755"]

  #{:extra => 'dmode=777,fmode=777'}
  #config.vm.synced_folder "testfolder", "/home/vagrant/testfolder",
  #{:extra => 'dmode=777,fmode=777'}

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.

#  config.vm.network "private_network", ip: "192.168.50.100", virtualbox__intnet: "true"
  config.vm.network :forwarded_port, guest: 80, host: 80,
	  auto_correct: true

  config.vm.network :forwarded_port, guest: 443, host: 443,
	  auto_correct: true

  config.vm.network :forwarded_port, guest: 21111, host: 21111,
	  auto_correct: true

  for i in 6881..6899
	  config.vm.network :forwarded_port, guest: i, host: i,
	  auto_correct: true
  end

#  config.vm.network :forwarded_port, guest: 8080, host: 8081,
#	  auto_correct: true


  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
   config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:

     vb.customize ["modifyvm", :id, "--memory", "4096"]

   end
  
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #

  config.vm.provision :shell, :inline => "mv /root/.bash_profile /root/.bash_profile.bkp; mv /home/vagrant/.bash_profile /home/vagrant/.bash_profile.bkp; cp /vagrant/.bash_profile /home/vagrant; ln -s /home/vagrant/.bash_profile /root/.bash_profile"

  config.vm.provision :shell, :inline => "mv /root/.bashrc /root/.bashrc.bkp; mv /home/vagrant/.bashrc /home/vagrant/.bashrc.bkp; cp /vagrant/.bashrc /home/vagrant; ln -s /home/vagrant/.bashrc /root/.bashrc"

  config.vm.provision :shell, :inline => "echo foo > /vagrant/test"
  
  config.vm.provision :shell, :path => "shell/bootstrap.sh"

  #### ENABLE ACCESS - DISABLE iptables INPUT REJECT RULE
  config.vm.provision :shell, :inline => "iptables -D INPUT 5; iptables -F;"

  #### ENABLE ACCESS - DISABLE iptables INPUT REJECT RULE
  config.vm.provision :shell, :inline => "service httpd restart;"

  #### ENABLE ACCESS - DISABLE iptables INPUT REJECT RULE
  config.vm.provision :shell, :inline => "service httpd restart;"

#  config.vm.provision :shell, :inline => "/usr/bin/puppet apply /home/vagrant/notes/backup/puppet/manifests/site.pp"
  
  
#  config.vm.provision :puppet do |puppet|
#	puppet.manifests_path 	= 	"/vagrant/puppet/manifests"
#	puppet.module_path 		= 	"/vagrant/puppet/modules"
#	puppet.manifest_file  	= 	"site.pp"
#  end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end

