Notes-database-swissprot.txt

++</entry>



<entry [Tue Apr 29 04:15:24 EDT 2008] REDO attribute AFTER REBUILD OF CLUSTER>



ON gems:

use swissprot;
select stopword, matchcutoff , groupby , domainsize, count(distinct collectionid) from attribute group by stopword, matchcutoff , groupby, domainsize ;

+----------+-------------+---------+------------+------------------------------+
| stopword | matchcutoff | groupby | domainsize | count(distinct collectionid) |
+----------+-------------+---------+------------+------------------------------+
|        0 |        0.00 | size    |        300 |                        19620 |
+----------+-------------+---------+------------+------------------------------+
1 row in set (13.30 sec)






++</entry>



<entry [Fri Apr 18 18:46:12 EDT 2008] RAN arraysetlabeldaemon.pl AND arraydomaindaemon.pl WITH engine.pl>




 select count(distinct collectionid) from setlabel;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        62142 |
+------------------------------+


++</entry>



<entry [Thu Apr 17 19:51:27 PDT 2008] EXCLUDE SUPERFAMILY HITS >



select count(DISTINCT collectionid) from collectioniprscan where targetsource != 'SSF';
+------------------------------+
| count(DISTINCT collectionid) |
+------------------------------+
|                        67859 |
+------------------------------+
1 row in set (9.18 sec)

mysql> select count(DISTINCT collectionid) from collectioniprscan;
+------------------------------+
| count(DISTINCT collectionid) |
+------------------------------+
|                        68686 |
+------------------------------+


sudo ./arrayiprscansetalignment.pl 1 /common/pipeline/swissprot/collection/swissprot.iprscansetalignment.args

NO ENTRY IN iprscansetsequence OR irpscanset BUT DO NOT HAVE UNIQUE MOTIFS E.G., COLLECTION ID 8690:

SELECT DISTINCT accession, label        FROM iprscanset         WHERE collectionid = '8690';
Empty set (0.10 sec)

mysql> select * from collection where collectionid = 8690\G
*************************** 1. row ***************************
       collectionid: 8690
collectionaccession: 1
             source: swissprot
    sourceaccession: Q9H5V8
           sourceid: CDCP1_HUMAN
   sourceannotation: CUB domain-containing protein 1 precursor
           sequence: atggccggcctgaactgcggggtctctatcgcactgctaggggttctgctgctgggtgcggcgcgcctgccgcgcggggcagaagcttttgagattgctctgccacgagaaagcaacattacagttctcataaagctggggaccccgactctgctggcaaaaccctgttacatcgtcatttctaaaagacatataaccatgttgtccatcaagtctggagaaagaatagtctttacctttagctgccagagtcctgagaatcactttgtcatagagatccagaaaaatattgactgtatgtcaggcccatgtccttttggggaggttcagcttcagccctcgacatcgttgttgcctaccctcaacagaactttcatctgggatgtcaaagctcataagagcatcggtttagagctgcagttttccatccctcgcctgaggcagatcggtccgggtgagagctgcccagacggagtcactcactccatcagcggccgaatcgatgccaccgtggtcaggatcggaaccttctgcagcaatggcactgtgtcccggatcaagatgcaagaaggagtgaaaatggccttacacctcccatggttccaccccagaaatgtctccggcttcagcattgcaaaccgctcatctataaaacgtctgtgcatcatcgagtctgtgtttgagggtgaaggctcagcaaccctgatgtctgccaactacccagaaggcttccctgaggatgagctcatgacgtggcagtttgtcgttcctgcacacctgcgggccagcgtctccttcctcaacttcaacctctccaactgtgagaggaaggaggagcgggttgaatactacatcccgggctccaccaccaaccccgaggtgttcaagctggaggacaagcagcctgggaacatggcggggaacttcaacctctctctgcaaggctgtgaccaagatgcccaaagtccagggatcctccggctgcagttccaagttttggtccaacatccacaaaatgaaagcagtgagtga
*************************** 2. row ***************************
       collectionid: 8690
collectionaccession: 2
             source: swissprot
    sourceaccession: Q5U462
           sourceid: CDCP1_MOUSE
   sourceannotation: CUB domain-containing protein 1 precursor
           sequence: ctactggtgcccaaggacaagctcagccttatgctggtgccaggccagaagctgcagcaacatacgcaagagaggccttgtaacaccagcttcgggtaccacgtgaccagcaccacccctggccaggacctgtactttggttccttctgctcaggaggctccatcgagaagatccaggtgaagcaaaatagctcggtgacactgagagcctatgctcccagctttcaacaagaagtctccaagcaaggcctgatagtgtcctatacaccgtatttcaaagaggaaggcatcttcacggtgaccccagacacaaaaaacaaggtctacctaagatcacccaactgggaccgtggcctgcctgccctctcctcagtgtcttggaacatcagtgtgcctagcaaccaagtggcttgtctgaccgtcttgaaagagcgttctggcttggcctgccagtcagggcgtgcattcatgatcatccaggagcagcagtcccgggcagaggagatcttcagcttggaggaggaagtcctgcctaagccaagtttccaccatcacagcttctgggttaacatctccaattgcagccccatgaatggcaagcagctagatttgctcttctgggtgactcttaccccgaggactgtagatttggctgtcgtcattggtgcagcaggaggtggagctctgctgctgtttgccctggtactcatcatctgcttcgtgaaaaagaagaagaaggtggataagggtcctgctgtgggtatctataatggcaatgtcaatacccagatgccccagacccaaaagttcccgaaagggcgaaaagacaatgactcccatgtgtatgctgtcatcgaagacaccatggtgtatgggcacttgctgcaggactcgggtggatccttcatccaaccagaggtggacacctaccggcccttccagggccccatgggagactgccctcccaccccaccccctctattctccaggaccccaactgcaaagttcactgcagaggagctggctcctagtagccctcctgagtctgagagtgaaccttacactttctcgcatcccaacaagggggagattggtgttagggagactgacatccccttactccatacccaaggaccagtggagactgaagagtaa
2 rows in set (0.02 sec)

mysql> select * from uniquemotif where accession = 'Q5U462';
Empty set (0.02 sec)

mysql> select * from uniquemotif where accession = ' Q9H5V8';
Empty set (0.00 sec)

mysql> select * from uniquemotif where accession = 'Q9H5V8';
Empty set (0.00 sec)

------------------

    No output file found. Doing output file: /common/pipeline/swissprot/clustalw/swissprot.iprscansetalignment.8198.in.aln
    SELECT DISTINCT collectionaccession, accession, sequence
            FROM iprscansetsequence
            WHERE collectionid = '8198'
    No accessions defined for collection id: 8198
    
    Id number: 0, increment_counter: 88
    Collection id: 8201
    No output file found. Doing output file: /common/pipeline/swissprot/clustalw/swissprot.iprscansetalignment.8201.in.aln
    SELECT DISTINCT collectionaccession, accession, sequence
            FROM iprscansetsequence
            WHERE collectionid = '8201'
    No accessions defined for collection id: 8201
    
    Id number: 0, increment_counter: 90
    Collection id: 8216
    No output file found. Doing output file: /common/pipeline/swissprot/clustalw/swissprot.iprscansetalignment.8216.in.aln
    SELECT DISTINCT collectionaccession, accession, sequence
            FROM iprscansetsequence
            WHERE collectionid = '8216'
    No accessions defined for collection id: 8216
    
    Id number: 0, increment_counter: 92
    Collection id: 8228
    No output file found. Doing output file: /common/pipeline/swissprot/clustalw/swissprot.iprscansetalignment.8228.in.aln
    SELECT DISTINCT collectionaccession, accession, sequence
            FROM iprscansetsequence
            WHERE collectionid = '8228'
    No accessions defined for collection id: 8228
    
    Id number: 0, increment_counter: 94
    Collection id: 8690
    No output file found. Doing output file: /common/pipeline/swissprot/clustalw/swissprot.iprscansetalignment.8690.in.aln
    SELECT DISTINCT collectionaccession, accession, sequence
            FROM iprscansetsequence
            WHERE collectionid = '8690'
    No accessions defined for collection id: 8690
    
    Id number: 0, increment_counter: 96
    Collection id: 8835
    No output file found. Doing output file: /common/pipeline/swissprot/clustalw/swissprot.iprscansetalignment.8835.in.aln
    SELECT DISTINCT collectionaccession, accession, sequence
            FROM iprscansetsequence
            WHERE collectionid = '8835'
    No accessions defined for collection id: 8835
    
    Id number: 0, increment_counter: 98
    Collection id: 8838
    No output file found. Doing output file: /common/pipeline/swissprot/clustalw/swissprot.iprscansetalignment.8838.in.aln
    SELECT DISTINCT collectionaccession, accession, sequence
            FROM iprscansetsequence
            WHERE collectionid = '8838'
    No accessions defined for collection id: 8838
    
    Run time: 00:00:01
    Completed ./arrayiprscansetalignment.pl
    6:40PM, 17 April 2008
    ****************************************


++</entry>



<entry [Thu Apr 17 16:35:57 EDT 2008] GET REMAINING ALIGNMENTS>



 ./arrayiprscansetalignmentloaddata.pl -d swissprot -t 30
 
    Run time: 00:06:14
    Completed ./arrayiprscansetalignmentloaddata.pl
    1:19PM, 18 April 2008
    ****************************************

    select count(*) from iprscansetalignment;
    +----------+
    | count(*) |
    +----------+
    |    66196 |
    +----------+

BEFORE:


select count(distinct collectionid) from collection;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        82113 |
+------------------------------+

select count(distinct collectionid) from collectioniprscan;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        68686 |
+------------------------------+

select count(*) from iprscansetalignment;
+----------+
| count(*) |
+----------+
|    58159 |
+----------+


PUT ALL collectionids WITH NO ALIGNMENTS IN noalignment:

CREATE TABLE noalignment (collectionid INT(8));

INSERT INTO noalignment
SELECT DISTINCT collectioniprscan.collectionid
FROM collectioniprscan
LEFT JOIN iprscansetalignment
ON collectioniprscan.collectionid = iprscansetalignment.collectionid
WHERE iprscansetalignment.collectionid  IS NULL;
Query OK, 10527 rows affected (12.29 sec)



GET THE COLLECTION IDS WITH UNIQUE MOTIFS:


select count(*) from uniquemotif;
+----------+
| count(*) |
+----------+
|     7176 |
+----------+
1 row in set (0.01 sec)

select count(distinct accession) from uniquemotif;
+---------------------------+
| count(distinct accession) |
+---------------------------+
|                      6042 |
+---------------------------+


CREATE TABLE uniquecollection ( collectionid INT(8));
INSERT INTO uniquecollection
SELECT DISTINCT collection.collectionid
FROM collection, uniquemotif
WHERE collection.sourceaccession = uniquemotif.accession;
5565 rows in set (9.11 sec)


GET THE COLLECTION IDS WITH NO ALIGNMENTS THAT DO NOT HAVE UNIQUE MOTIFS:

CREATE TABLE doalignment ( collectionid INT(8));
INSERT INTO doalignment
SELECT noalignment.collectionid
FROM noalignment
LEFT JOIN
uniquecollection
ON noalignment.collectionid = uniquecollection.collectionid
WHERE uniquecollection.collectionid IS NULL;
Query OK, 9207 rows affected (4 min 14.38 sec)



++</entry>



<entry [Wed Apr 16 01:59:40 EDT 2008] RELOADED iprscansetalignment>



./arrayiprscansetalignmentloaddata.pl -d swissprot -t 18 &> out
  
drwxrwxr-x   41614 root   admin       3M Apr 16 17:33 clustalw.1-31K
drwxrwxr-x    3525 root   admin       2M Apr 10 03:05 clustalw.32K-56K
drwxrwxr-x   11200 root   admin     371K Apr 10 13:35 clustalw.58K-62K


    select count(distinct collectionid) from iprscansetalignment;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                        58159 |
    +------------------------------+
   
    Run time: 00:13:52
    Completed ./arrayiprscansetalignmentloaddata.pl
    7:52PM, 16 April 2008
    ****************************************

++</entry>



<entry [Mon Apr 14 02:07:55 EDT 2008] RERUN arraytreelearningdaemon.pl>



sudo ./arraytreelearningdaemon.pl -d swissprot -g size -s 300 -t 18

    Run time: 00:07:16
    Completed ./arraytreelearningdaemon.pl
    1:42PM, 15 April 2008
    ****************************************


    USE swissprot;
    SELECT COUNT(DISTINCT collectionid) FROM treelearning;
    
    +------------------------------+
    | COUNT(DISTINCT collectionid) |
    +------------------------------+
    |                        17600 |
    +------------------------------+

    select stopword, matchcutoff , groupby , domainsize, count(*) from treelearning group by stopword, matchcutoff , groupby, domainsize ;
    +----------+-------------+---------+------------+----------+
    | stopword | matchcutoff | groupby | domainsize | count(*) |
    +----------+-------------+---------+------------+----------+
    |        0 |        0.00 | size    |        300 |   298526 |
    +----------+-------------+---------+------------+----------+
    1 row in set (1.43 sec)
    
select stopword, matchcutoff , groupby , domainsize, count(distinct collectionid) from treelearning group by stopword, matchcutoff , groupby, domainsize ;
    +----------+-------------+---------+------------+------------------------------+
    | stopword | matchcutoff | groupby | domainsize | count(distinct collectionid) |
    +----------+-------------+---------+------------+------------------------------+
    |        0 |        0.00 | size    |        300 |                        17600 |
    +----------+-------------+---------+------------+------------------------------+




sudo ./arrayattributedaemon.pl -d swissprot -g size -s 300 -t 20 -w


sudo ./arrayattributedaemon.pl -d swissprot -t 20 -g size -s 300 -m 0.5


sudo ./arrayattributedaemon.pl -d swissprot -t 20 -g size -s 300 -m 1




++</entry>



<entry [Mon Apr 14 01:13:45 EDT 2008] UNIQUE MOTIFS>


    
sudo ./arrayuniquemotifdaemon.pl -d swissprot -f /Users/local/FUNNYBASE/pipeline/swissprot/data/indexer.swissprotiprscan.targetname-name.tsv -T 20

    Cluster::Worker::Ant
    
./arrayuniquemotif.pl 1 /common/pipeline/swissprot/collection/swissprot.uniquemotif.args


    select count(*) from uniquemotif;
    +----------+
    | count(*) |
    +----------+
    |     7176 |
    +----------+
    1 row in set (0.03 sec)

++</entry>



<entry [Sun Apr 13 01:06:03 EDT 2008] COLLECTION ID COUNTS - IPRSCAN PROBLEM>



DIAGNOSIS:

THE INTERPROSCAN QUERYSTART AND QUERYSTOP POINTS ARE REPORTED INACCURATELY IN THE INTERPRO OUTPUT FILE (match_complete.xml)

SOLUTION:

A) USE UPDATED match_complete.xml FILE

B) RUN iprscan ON SEQUENCE (i.e., manual approach for sequences of interest)


select distinct collectionid, collectionaccession , accession  from attribute where collectionid = 2096;+--------------+---------------------+-----------+
| collectionid | collectionaccession | accession |
+--------------+---------------------+-----------+
|         2096 |                   0 | Q4K4K8    |
|         2096 |                   0 | Q4K837    |
|         2096 |                   0 | Q4L966    |
|         2096 |                   0 | Q59931    |
|         2096 |                   0 | Q5HE78    |
|         2096 |                   0 | Q5HL59    |
|         2096 |                   0 | Q5XI42    |
|         2096 |                   0 | Q60HH8    |
|         2096 |                   0 | Q62148    |
|         2096 |                   0 | Q62LN5    |
+--------------+---------------------+-----------+
10 rows in set (0.00 sec)

mysql> select collectionid, collectionaccession, querystart, querystop, targetid,targetname  from collectioniprscan where collectionid = 2096;
+--------------+---------------------+------------+-----------+----------------+---------------------+
| collectionid | collectionaccession | querystart | querystop | targetid       | targetname          |
+--------------+---------------------+------------+-----------+----------------+---------------------+
|         2096 |                   1 |         36 |      1443 | PTHR11699:SF15 | ALDH                |
|         2096 |                   1 |          3 |      1317 | PF00171        | Aldedh              |
|         2096 |                   1 |         21 |      1410 | PIRSF036492    | ALDH                |
|         2096 |                   1 |         -3 |        -3 | PS00070        | ALDEHYDE_DEHYDR_CYS |
|         2096 |                   1 |         -3 |        -3 | PS00687        | ALDEHYDE_DEHYDR_GLU |
+--------------+---------------------+------------+-----------+----------------+---------------------+
5 rows in set (0.04 sec)




++</entry>



<entry [Sun Apr 13 01:06:03 EDT 2008] COLLECTION ID COUNTS - LACK OF GRANULARITY>



UNIQUE SWISSPROT NAMES = 88,410 AND IN COLLECTION IS 82,113:

USE swissprot
select count(distinct collectionid) from collection;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        82113 |
+------------------------------+

select count(distinct collectionid) from collectioniprscan;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        68686 |
+------------------------------+

 select count(distinct collectionid) from iprscansetsequence;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        62902 |
+------------------------------+


    select stopword, matchcutoff, groupby, domainsize, count(distinct collectionid) AS count FROM attribute group by stopword, matchcutoff, groupby, domainsize;

    +----------+-------------+---------+------------+-------+
    | stopword | matchcutoff | groupby | domainsize | count |
    +----------+-------------+---------+------------+-------+
    |        0 |        0.00 | size    |        300 | 19620 |
    +----------+-------------+---------+------------+-------+


    select stopword, matchcutoff, groupby, domainsize, count(distinct collectionid) AS count FROM nfold group by stopword, matchcutoff, groupby, domainsize;
    +----------+-------------+---------+------------+-------+
    | stopword | matchcutoff | groupby | domainsize | count |
    +----------+-------------+---------+------------+-------+
    |        0 |        0.00 |         |          0 | 18604 |
    +----------+-------------+---------+------------+-------+


LARGE DROP AT treelearning:

    USE swissprot;
    SELECT COUNT(DISTINCT collectionid) FROM treelearning;
    +------------------------------+
    | COUNT(DISTINCT collectionid) |
    +------------------------------+
    |                        13159 |
    +------------------------------+


DIAGNOSIS
=========

FIXED 300 AMINO ACID WIDTH DOES NOT ALLOW FOR SUFFICIENT GRANULARITY TO DETERMINE THE DIFFERENCE BETWEEN LABEL '1' SEQUENCE MOTIF DISTRIBUTION AND THOSE OF LABEL '0' SEQUENCES:


SOLUTION
========

a) FALL BACK ON BAYESIAN MODEL.
b) DOMAIN WIDTH OF 150 BP MAY RESULT IN TREE THAT COULD DISTINGUISH BETWEEN THEM IN SOME CASES. IN THIS CASE THE MOTIF WITH THE LONGEST NAME ENCOMPASSES THE DISTINGUISHING MOTIF BUT IT IS LONG ENOUGH THAT IT WOULD CREATE THE FOLLOWING ATTRIBUTE FOR THE LABEL '1' SEQUENCE:

1 carla_c4
2 carla_c4

AND THE FOLLOWING ATTRIBUTES FOR THE LABEL '0' SEQUENCES:

1 carla_c4
2 *


DETAILS
=======

COLLECTION ID = 11

 select * from collection where collectionid = 10\G
*************************** 1. row ***************************
       collectionid: 10
collectionaccession: 1
             source: swissprot
    sourceaccession: Q05349
           sourceid: 12KD_FRAAN
   sourceannotation: Auxin-repressed 12.5 kDa protein
           sequence: atggttctgctagacaagctttgggatgacatagtagctggacctcagcctgaacgtggtctcggcatgctcaggaaggttcctcagcccttgaacctcaaagatgagggagagtcgagcaagatcacgatgccgacgacgccgacgacgccggtgaccccaacaacgccgatatcggcgcgcaaggacaacgtatggaggagtgtgttccacccaggtagcaacctgtctagcaagacgatgggaaaccaggtgtttgatagcccacagccaaactctcccactgtctatgactggatgtacagtggagagacgaggagcaagcatcatcgttaa


./arraytreelearning.pl 1 /common/pipeline/swissprot/collection/swissprot.treelearning.args

Training accessions: P17530 P22625 P37992 Q00572 Q02123 Q01687
Training set size: 6
Training instance P17530 (label 0)
1 carla_c4
Training instance P22625 (label 0)
1 carla_c4
Training instance P37992 (label 0)
1 carla_c4
Training instance Q00572 (label 0)
1 carla_c4
Training instance Q02123 (label 0)
1 carla_c4
Training instance Q01687 (label 1)
1 carla_c4
Test set size: 2
Training learner...
Tree not defined. Collection id: 11; nfold number: 7

select distinct collectionid, collectionaccession , accession  from attribute where collectionid = 11;
+--------------+---------------------+-----------+
| collectionid | collectionaccession | accession |
+--------------+---------------------+-----------+
|           11 |                   0 | P16654    |
|           11 |                   0 | P17530    |
|           11 |                   0 | P22625    |
|           11 |                   0 | P27336    |
|           11 |                   0 | P37992    |
|           11 |                   0 | Q00572    |
|           11 |                   0 | Q02123    |
|           11 |                   1 | Q01687    |
+--------------+---------------------+-----------+
8 rows in set (0.00 sec)

select collectionid, label, annotation , accession from iprscanset where collectionid = 11;
+--------------+-------+------------+-----------+
| collectionid | label | annotation | accession |
+--------------+-------+------------+-----------+
|           11 |     0 | 10.7 kDa   | P16654    |
|           11 |     0 | 10.7 kDa   | P17530    |
|           11 |     0 | 11.6 kDa   | P22625    |
|           11 |     0 | 16 kDa     | P27336    |
|           11 |     0 | 12.6 kDa   | P37992    |
|           11 |     0 | 12.6 kDa   | Q00572    |
|           11 |     0 | 14 kDa     | Q02123    |
+--------------+-------+------------+-----------+

select collectionid, collectionaccession , sourceaccession, length(sequence) from collection where collectionid = 11;
+--------------+---------------------+-----------------+------------------+
| collectionid | collectionaccession | sourceaccession | length(sequence) |
+--------------+---------------------+-----------------+------------------+
|           11 |                   1 | Q01687          |              327 |
|           11 |                   2 | P08795          |              309 |
+--------------+---------------------+-----------------+------------------+
2 rows in set (0.02 sec)


select collectionid, collectionaccession, querystart, querystop, targetid  from collectioniprscan where collectionid = 11;
+--------------+---------------------+------------+-----------+----------+
| collectionid | collectionaccession | querystart | querystop | targetid |
+--------------+---------------------+------------+-----------+----------+
|           11 |                   1 |          6 |       273 | PF01623  |
|           11 |                   1 |         42 |       234 | SSF54076 |
+--------------+---------------------+------------+-----------+----------+
2 rows in set (0.00 sec)

select collectionid, collectionaccession, querystart, querystop, targetid,targetname  from collectioniprscan where collectionid = 11;
+--------------+---------------------+------------+-----------+----------+------------+
| collectionid | collectionaccession | querystart | querystop | targetid | targetname |
+--------------+---------------------+------------+-----------+----------+------------+
|           11 |                   1 |          6 |       273 | PF01623  | Carla_C4   |
|           11 |                   1 |         42 |       234 | SSF54076 | RNaseA     |
+--------------+---------------------+------------+-----------+----------+------------+
2 rows in set (0.00 sec)

select collectionid, collectionaccession, accession, querystart, querystop, targetid,targetname  from iprscanset  where collectionid = 11;
ERROR 1054 (42S22): Unknown column 'collectionaccession' in 'field list'
select collectionid, accession, querystart, querystop, targetid,targetname  from iprscanset  where collectionid = 11;
+--------------+-----------+------------+-----------+----------+------------+
| collectionid | accession | querystart | querystop | targetid | targetname |
+--------------+-----------+------------+-----------+----------+------------+
|           11 | P16654    |          0 |        87 | PF01623  | Carla_C4   |
|           11 | P17530    |          2 |        91 | PF01623  | Carla_C4   |
|           11 | P22625    |          0 |        91 | PF01623  | Carla_C4   |
|           11 | P27336    |         27 |       116 | PF01623  | Carla_C4   |
|           11 | P37992    |          0 |        91 | PF01623  | Carla_C4   |
|           11 | Q00572    |          4 |        94 | PF01623  | Carla_C4   |
|           11 | Q02123    |          4 |        96 | PF01623  | Carla_C4   |
+--------------+-----------+------------+-----------+----------+------------+
7 rows in set (0.10 sec)

select collectionid, collectionaccession, querystart, querystop, targetid  from collectioniprscan where collectionid = 11;  

++</entry>



<entry [Sat Apr  5 22:13:24 EDT 2008] AVERAGE LENGTH OF INTERPRO MOTIFS AND SWISSPROT IPRSCAN DOMAINS>




The average length of InterPro motifs in the Swiss-Prot database is 49 amino acids (147 nucleotides).

use indexer;
select avg(querystop - querystart) from swissprotiprscan;
+-----------------------------+
| avg(querystop - querystart) |
+-----------------------------+
|                    146.7735 |
+-----------------------------+
1 row in set (14.15 sec)


The average length of InterPro domains among the Swiss-Prot sequences was 89 amino acids (266 nucleotides).

select avg(querystop - querystart) from domain;
+-----------------------------+
| avg(querystop - querystart) |
+-----------------------------+
|                    265.5315 |
+-----------------------------+
1 row in set (24.96 sec)


++</entry>



<entry [Sat Apr  5 00:25:03 EDT 2008] RERAN arrayiprscansetalignmentdaemon - SLOW: SOLUTION CREATE NEW DIRECTORY!!>


    
gems:~/FUNNYBASE/bin/signature local$ sudo ./arrayiprscansetalignmentdaemon.pl -d swissprot -n 20

    Run time: 22:42:05
    Completed ./arrayiprscansetalignmentdaemon.pl
    10:43PM, 8 April 2008
    ****************************************

FROM NO. 28300 TIL 43702 OUT OF 62902 collectionids IN iprscansetsequence:

cd /common/pipeline/swissprot
tail out

...
-rw-r--r--       1 root  admin       1K Apr  8 22:43 swissprot.iprscansetalignment.60387.dnd
-rw-r--r--       1 root  admin     257K Apr  8 22:43 swissprot.iprscansetalignment.60387.in.aln

grep -n 60387 /common/pipeline/swissprot/collection/swissprot.iprscansetalignment.idfile
43702:60387


RESET start TO 41700, ESTIMATED DURATION ~24 hours


RESTARTED WITH NEW DIRECTORY:

57300 TO 62900 (4,600 sequences):

    Run time: 06:12:08
    Completed ./arrayiprscansetalignmentdaemon.pl
    9:19AM, 10 April 2008
    ****************************************


ESTIMATED TOTAL DURATION (WITH DIRECTORY CHANGE):

= 6.16 * 62900 / 4600

= 90 HOURS


++</entry>



<entry [Fri Apr  4 00:52:47 EDT 2008] CHECK treelookup FOR RARE CASES WHERE COLLECTION ID DOESN'T MATCH TOP TARGET ID>



RAN treelookup:


cd ~/FUNNYBASE/bin/signature
sudo ./arraytreelookupdaemon.pl -d subswiss -t swissprot -g size -s 300 -n 20


GOT SEVEN CASES WHERE DOESN'T MATCH UP:

use subswiss;
select count(distinct collectionid) from treelookup;
|                          139 |

select count(distinct collectionid) from treelookup where collectionid = targetid;
|                          132 |


create temporary table hastreelookup(collectionid int(8));
insert into hastreelookup select distinct collectionid from treelookup where collectionid = targetid;
select distinct treelookup.collectionid from treelookup left join hastreelookup on treelookup.collectionid = hastreelookup.collectionid where hastreelookup.collectionid is null;
+--------------+
| collectionid |
+--------------+
|         3508 |
|         4372 |
|         4428 |
|         4477 |
|         5086 |
|         6317 |
|         6318 |
+--------------+


USE subswiss;

select distinct querystart, querystop, targetid from collectioniprscan where collectionid = 3508 order by querystart;
+------------+-----------+----------+
| querystart | querystop | targetid |
+------------+-----------+----------+
|          0 |       216 | PF07573  |
...
|       1554 |      1704 | SM00401  |
|       1560 |      1611 | PR00619  |
|       1572 |      1644 | PS00344  |
|       1572 |      1674 | PF00320  |
|       1572 |      1713 | PS50114  |
|       1614 |      1665 | PR00619  |
|       1959 |      2109 | SM00401  |
|       1959 |      2118 | PS50114  |
|       1965 |      2016 | PR00619  |
|       1971 |      2121 | SM00401  |
|       1971 |      2130 | PS50114  |
|       1977 |      2028 | PR00619  |
|       1977 |      2049 | PS00344  |
|       1977 |      2079 | PF00320  |
|       1989 |      2061 | PS00344  |
|       1989 |      2091 | PF00320  |
|       1998 |      2148 | SM00401  |
|       1998 |      2157 | PS50114  |
|       2004 |      2055 | PR00619  |
|       2007 |      2157 | SM00401  |
|       2007 |      2166 | PS50114  |
|       2013 |      2064 | PR00619  |
|       2016 |      2088 | PS00344  |
|       2016 |      2118 | PF00320  |
|       2019 |      2070 | PR00619  |
|       2025 |      2097 | PS00344  |
|       2025 |      2127 | PF00320  |
|       2031 |      2082 | PR00619  |
|       2058 |      2109 | PR00619  |
|       2061 |      2211 | SM00401  |
|       2061 |      2220 | PS50114  |
|       2067 |      2118 | PR00619  |
|       2079 |      2151 | PS00344  |
|       2079 |      2181 | PF00320  |
|       2121 |      2172 | PR00619  |
+------------+-----------+----------+

select distinct targetid from collectioniprscan where collectionid = 3508;
+----------+
| targetid |
+----------+
| PF00320  |
| PR00619  |
| PS50114  |
| PS00344  |
| SM00401  |
| PF07573  |
+----------+



USE swissprot;

select querystart, querystop, targetids  from domain where stopword = 0 and matchcutoff = 0 and collectionid = 3508 order by querystart;
+------------+-----------+-----------------------------------------+
| querystart | querystop | targetids                               |
+------------+-----------+-----------------------------------------+
|        214 |       513 | PF07573                                 |
|        772 |      1050 | PF07573                                 |
|       2352 |      2409 | PF00320-PS00344-PR00619-SM00401-PS50114 |
|       2410 |      2465 | PF00320-PS00344-PR00619-SM00401-PS50114 |
|       2466 |      2511 | PF00320-PS00344-PR00619-SM00401-PS50114 |
|       2512 |      2627 | PF00320-PS00344-PR00619-SM00401-PS50114 |
|       2758 |      2815 | PF00320-PS00344-PR00619-SM00401-PS50114 |
|       2816 |      2956 | PF00320-PS00344-PR00619-SM00401-PS50114 |
+------------+-----------+-----------------------------------------+







++</entry>



<entry [Mon Mar 31 03:53:04 EDT 2008] TWEAKS: LATER REDO swissprotcollection.pl AND iprscansetsequence.pl TO TAKE LONGEST nt sequence FOR EACH ACCESSION>



use swissprot;
select length(sequence), sourceaccession  from collection where collectionid = 10893 and collectionaccession  = 2;
+------------------+-----------------+
| length(sequence) | sourceaccession |
+------------------+-----------------+
|              327 | Q9CPW0          |
+------------------+-----------------+

use indexer;
select length(sequencent) from swissprotnt where accession = 'Q9CPW0';
+--------------------+
| length(sequencent) |
+--------------------+
|                327 |
|               3119 |
|                327 |
|               4201 |
+--------------------+

NB: SOME ACCESSIONS WILL HAVE ALL * ATTRIBUTE VALUES BECAUSE THEIR IPRSCANS ARE OUTSIDE THE REGION OF MULTIPLE ALIGNMENT (FOR ALL LABEL '1' SEQUENCES):

16492   0       Q5F4A3  0       0       swissprotnt     1       0       3       LRRCAP,LRR_1    size    300     iprscan 2184    2483
16492   0       Q5F4A3  0       0       swissprotnt     1       0       4       *       size    300     iprscan 2484    2783
16492   0       Q5F4A3  0       0       swissprotnt     1       0       5       *       size    300     iprscan 2784    3083
16492   0       Q5FVI3  0       0       swissprotnt     1       0       1       *       size    300     iprscan 1584    1883
16492   0       Q5FVI3  0       0       swissprotnt     1       0       2       LEURICHRPT,LRR_1,LRR_TYP        size    300     iprscan 1884    2183    \

16492   0       Q5FVI3  0       0       swissprotnt     1       0       3       LEURICHRPT,LRR_1,LRR_TYP        size    300     iprscan 2184    2483    \

16492   0       Q5FVI3  0       0       swissprotnt     1       0       4       *       size    300     iprscan 2484    2783
16492   0       Q5FVI3  0       0       swissprotnt     1       0       5       *       size    300     iprscan 2784    3083
16492   0       Q5I2M3  0       0       swissprotnt     1       0       1       *       size    300     iprscan 1584    1883
16492   0       Q5I2M3  0       0       swissprotnt     1       0       2       *       size    300     iprscan 1884    2183
16492   0       Q5I2M3  0       0       swissprotnt     1       0       3       *       size    300     iprscan 2184    2483
16492   0       Q5I2M3  0       0       swissprotnt     1       0       4       *       size    300     iprscan 2484    2783
16492   0       Q5I2M3  0       0       swissprotnt     1       0       5       *       size    300     iprscan 2784    3083
16492   0       Q5I2M5  0       0       swissprotnt     1       0       1       *       size    300     iprscan 1584    1883
16492   0       Q5I2M5  0       0       swissprotnt     1       0       2       *       size    300     iprscan 1884    2183
16492   0       Q5I2M5  0       0       swissprotnt     1       0       3       *       size    300     iprscan 2184    2483
16492   0       Q5I2M5  0       0       swissprotnt     1       0       4       *       size    300     iprscan 2484    2783
16492   0       Q5I2M5  0       0       swissprotnt     1       0       5       *       size    300     iprscan 2784    3083
16492   0       Q5I2M7  0       0       swissprotnt     1       0       1       *       size    300     iprscan 1584    1883
16492   0       Q5I2M7  0       0       swissprotnt     1       0       2       *       size    300     iprscan 1884    2183
16492   0       Q5I2M7  0       0       swissprotnt     1       0       3       *       size    300     iprscan 2184    2483
16492   0       Q5I2M7  0       0       swissprotnt     1       0       4       *       size    300     iprscan 2484    2783
16492   0       Q5I2M7  0       0       swissprotnt     1       0       5       *       size    300     iprscan 2784    3083
16492   0       Q5IS82  0       0       swissprotnt     1       0       1       IG-LIKE_FOLD,KINASE_LIKE,PKINASE_TYR,PROTEIN_KINASE_ATP,PROTEIN_KINASE_D\
OM,PROT_KINASE,TYRKC,TYRKINASE  size    300     iprscan 1584    1883
16492   0       Q5IS82  0       0       swissprotnt     1       0       2       KINASE_LIKE,PKINASE_TYR,PROTEIN_KINASE_DOM,PROT_KINASE,RECEPTOR_TYR_KIN_\
II,TYRKC,TYRKINASE      size    300     iprscan 1884    2183
16492   0       Q5IS82  0       0       swissprotnt     1       0       3       *       size    300     iprscan 2184    2483
16492   0       Q5IS82  0       0       swissprotnt     1       0       4       *       size    300     iprscan 2484    2783
16492   0       Q5IS82  0       0       swissprotnt     1       0       5       *       size    300     iprscan 2784    3083


LENGTH IS OKAY:

use swissprot;
select distinct accession, length(sequence)  from iprscansetsequence where collectionid = 16492;
+-----------+------------------+
| accession | length(sequence) |
+-----------+------------------+
| Q58A48    |             1044 |
| Q5BJ41    |             1659 |
| Q5BK65    |             2079 |
| Q5DU56    |              939 |
| Q5E9X4    |              921 |
| Q5F4A3    |              771 |
| Q5FVI3    |              720 |
| Q5HZV9    |             1083 |
| Q5I2M3    |             3093 |
| Q5I2M5    |             3090 |
| Q5I2M7    |             3096 |
| Q5IS37    |             2478 |
| Q5IS82    |             2478 |
| Q61809    |             2151 |


BUT IPRSCANS ARE ALL BEFORE THE FIRST DOMAIN:


AFTER Redoing iprscan start/stop based on clustalw alignment...
Iprscan 638..656 LRR_1
Iprscan 658..680 LRR_1
Iprscan 714..732 LRR_1
Iprscan 735..757 LRR_1
Iprscan 931..944 LEURICHRPT
Iprscan 1011..1034 LRR_1
Iprscan 1034..1047 LEURICHRPT
Iprscan 1036..1058 LRR_1
Iprscan 1143..1165 LRR_1
Iprscan 1168..1190 LRR_1
Iprscan 1190..1213 LRR_TYP
Iprscan 1192..1211 LRR_1
Iprscan 1216..1237 LRR_1
Iprscan 1240..1262 LRR_1
Iprscan 1370..1534 TIR
Iprscan 1377..1391 INTRLKN1R1F
Iprscan 1380..1528 TIR
Iprscan 1384..1483 TIR
Iprscan 1424..1451 INTRLKN1R1F

*******************************
Domain 0: nb-arc (1584..1883)
Domain members' targetnames:
NB-ARC, DISEASERSIST, 
*******************************
Domain 1: nb-arc (1884..2183)
Domain members' targetnames:
NB-ARC, DISEASERSIST, 
*******************************
Domain 2: nb-arc (2184..2483)
Domain members' targetnames:
NB-ARC, DISEASERSIST, 
*******************************
Domain 3: nb-arc (2484..2783)
Domain members' targetnames:
NB-ARC, DISEASERSIST, 
*******************************
Domain 4: lrr_1 (2784..3083)
Domain members' targetnames:
LRR_1, LEURICHRPT, DISEASERSIST, 


++</entry>



<entry [Tue Mar 25 16:18:51 EDT 2008] REDO SWISSPROT WORKFLOW USING name AS LABEL '1'>



1. POPULATE swissprot.collection TABLE 
======================================

sudo ./arrayswissprotcollectiondaemon.pl -d swissprot -s nucleotide -t 20

~ 3 HOURS

    select count(distinct collectionid) from collection;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                        88410 |
    +------------------------------+


2. Load 'collection' onto cluster
=================================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t collection    


3. Load InterPro hits into 'collectioniprscan' table
====================================================

sudo ./arrayswissprotcollectioniprscandaemon.pl -d swissprot -t 20

    Run time: 00:03:01
    Completed ./arrayswissprotcollectioniprscandaemon.pl
    8:51PM, 16 March 2008
    ****************************************
    
    select count(distinct collectionid) from collectioniprscan;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                        67953 |
    +------------------------------+


4. Load 'collectioniprscan' onto cluster
========================================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t collectioniprscan

ON gems:

sudo chmod 755 /common/pipeline/swissprot/collection/clusterloadtable.sh
sudo /common/pipeline/swissprot/collection/clusterloadtable.sh
sudo dsh -a "ps aux | grep mysql"


5. GET IPRSCAN SET 
==================

    1. FILTER OUT sourceaccessions FOR collectionid

    2. USE IPRSCAN targetids FOR UP TO 20 collectionaccessions FOR collectionid

    3. COLLECT UP TO 100 SWISSPROT ACCESSIONS


sudo ./arrayiprscansetdaemon.pl -d swissprot -s nucleotide -t 20 
    

    Run time: 03:54:14
    Completed ./arrayswissprotiprscansetdaemon.pl
    6:23AM, 25 March 2008
    ****************************************
    
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                        62902 |
    +------------------------------+
    1 row in set (6 min 31.15 sec)
    

6. Load 'iprscanset' onto cluster
=================================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t iprscanset

    Run time: 00:02:58
    Completed ./clusterloadtable.pl
    12:23AM, 17 March 2008
    ****************************************


7. GET IPRSCAN SET SEQUENCES
============================

sudo ./arraysetsequencedaemon.pl -d swissprot -s nucleotide -t 20

    Run time: 00:27:41
    Completed ./arraysetsequencedaemon.pl
    0:57AM, 30 March 2008
    ****************************************    

    select count(distinct collectionid) from iprscansetsequence;    
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                        67522 |
    +------------------------------+

    
8. GET IPRSCAN SET MULTIPLE ALIGNMENT
=====================================

sudo ./arrayiprscansetalignmentdaemon.pl -d swissprot -n 20

    34,000 DONE
 
    Run time: 150:32:39
    Completed ./arrayiprscansetalignmentdaemon.pl
    9:20PM, 23 March 2008
    ****************************************


9. LOAD MULTIPLE ALIGNMENTS
===========================

(REDO LATER WITH clustalw FILES)

./arrayiprscansetalignmentloaddata.pl -d swissprot
    
    Run time: 00:00:04
    Completed ./arrayiprscansetalignmentloaddata.pl
    6:46PM, 6 February 2008
    ****************************************
    
    select count(*) from iprscansetalignment;
    +----------+
    | count(*) |
    +----------+
    |    25802 |
    +----------+
    
    
10. LOAD iprscansetsequence AND iprscansetalignment TABLES TO CLUSTER
=============================================================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t iprscansetsequence


cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t iprscansetsequence,iprscansetalignment


11. POPULATE setlabel
=====================

sudo ./arraysetlabeldaemon.pl -d swissprot -t 20

    NB: STUCK ON ID NUMBER 25300

    Run time: 00:26:34
    Completed ./arraysetlabeldaemon.pl
    0:18AM, 1 April 2008
    ****************************************


sudo ./arraysetlabeldaemon.pl -d swissprot -t 20 -w 

    Run time: 00:28:57
    Completed /Users/local/FUNNYBASE/bin/swissprot/arraysetlabeldaemon.pl
    6:03AM, 29 March 2008
    ****************************************
    
sudo ./arraysetlabeldaemon.pl -d swissprot -t 20 -m 0.25

    Run time: 00:29:52
    Completed /Users/local/FUNNYBASE/bin/swissprot/arraysetlabeldaemon.pl
    6:33AM, 29 March 2008
    ****************************************

sudo ./arraysetlabeldaemon.pl -d swissprot -t 20 -m 0.5

    Run time: 00:28:56
    Completed /Users/local/FUNNYBASE/bin/swissprot/arraysetlabeldaemon.pl
    7:02AM, 29 March 2008
    ****************************************

sudo ./arraysetlabeldaemon.pl -d swissprot -t 20 -m 0.75

    Run time: 00:29:34
    Completed /Users/local/FUNNYBASE/bin/swissprot/arraysetlabeldaemon.pl
    7:32AM, 29 March 2008
    ****************************************

sudo ./arraysetlabeldaemon.pl -d swissprot -t 20 -m 1.0

    Run time: 00:29:41
    Completed /Users/local/FUNNYBASE/bin/swissprot/arraysetlabeldaemon.pl
    8:01AM, 29 March 2008
    ****************************************
    
    select distinct stopword , matchcutoff, count(distinct collectionid)  from setlabel group by stopword , matchcutoff order by matchcutoff ;
    +----------+-------------+------------------------------+
    | stopword | matchcutoff | count(distinct collectionid) |
    +----------+-------------+------------------------------+
    |        0 |        0.00 |                        21828 |
    |        1 |        0.00 |                        21828 |
    |        1 |        0.25 |                        21828 |
    |        1 |        0.50 |                        21644 |
    |        1 |        0.75 |                        21633 |
    |        1 |        1.00 |                        21734 |
    +----------+-------------+------------------------------+




12. LOAD setlabel TO CLUSTER
============================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t setlabel




13. DO DOMAINS
==============

NB: USE sudo ./engine.pl -d swissprot


sudo ./arraydomaindaemon.pl -d swissprot -t 20

    Run time: 01:18:21
    Completed ./arraydomaindaemon.pl
    2:47PM, 30 March 2008
    ****************************************

    ./arraydomainloaddata.pl -d swissprot -t 20
    
        Run time: 00:00:15
        Completed ./arraydomainloaddata.pl
        11:15PM, 1 April 2008
        ****************************************
    
sudo ./arraydomaindaemon.pl -d swissprot -t 20 -w
    
    Run time: 01:25:41
    Completed ./arraydomaindaemon.pl
    6:55PM, 1 April 2008
    ****************************************

    ./arraydomainloaddata.pl -d swissprot -t 20 -w

        Run time: 00:00:28
        Completed ./arraydomainloaddata.pl
        11:15PM, 1 April 2008
        ****************************************

        select distinct stopword , matchcutoff, count(distinct collectionid)  from domain group by stopword , matchcutoff order by matchcutoff ;
        +----------+-------------+------------------------------+
        | stopword | matchcutoff | count(distinct collectionid) |
        +----------+-------------+------------------------------+
        |        0 |        0.00 |                        19812 |
        |        1 |        0.00 |                        21443 |
        +----------+-------------+------------------------------+


sudo ./arraydomaindaemon.pl -d swissprot -t 20 -m 0.5

    Run time: 01:18:21
    Completed /Users/local/FUNNYBASE/bin/swissprot/arraydomaindaemon.pl
    4:00AM, 2 April 2008
    ****************************************

    ./arraydomainloaddata.pl -d swissprot -t 20 -m 0.5

        Run time: 00:01:11
        Completed /Users/local/FUNNYBASE/bin/swissprot/arraydomainloaddata.pl
        4:01AM, 2 April 2008
        ****************************************

sudo ./arraydomaindaemon.pl -d swissprot -t 20 -m 1

    Run time: 01:17:34
    Completed /Users/local/FUNNYBASE/bin/swissprot/arraydomaindaemon.pl
    5:19AM, 2 April 2008
    ****************************************

    ./arraydomainloaddata.pl -d swissprot -t 20 -m 1

        Run time: 00:00:43
        Completed .//arraydomainloaddata.pl
        12:23AM, 2 April 2008
        ****************************************

    select stopword, matchcutoff, count(distinct collectionid) from domain group by stopword, matchcutoff;
    +----------+-------------+------------------------------+
    | stopword | matchcutoff | count(distinct collectionid) |
    +----------+-------------+------------------------------+
    |        0 |        0.00 |                        19812 |
    |        1 |        0.00 |                        21443 |
    |        1 |        0.50 |                        21278 |
    |        1 |        1.00 |                        21368 |
    +----------+-------------+------------------------------+
    4 rows in set (31.56 sec)



14. Load 'domain' onto cluster
==============================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t domain


    
15. Populate 'attribute' table
=====================================

REQUIRED:
collectioniprscan TABLE     (already loaded for arrayiprscanset.pl)
iprscanset TABLE            (already loaded for arraydomain.pl)
iprscansetalignment TABLE   (already loaded for arraydomain.pl)
iprscansetsequence TABLE
domain TABLE


sudo ./arrayattributedaemon.pl -d swissprot -g size -s 300 -t 20

    Run time: 02:32:04
    Completed /Users/local/FUNNYBASE/bin/swissprot/arrayattributedaemon.pl
    9:35PM, 2 April 2008
    ****************************************

    select stopword, matchcutoff, groupby, domainsize, count(distinct collectionid) AS count FROM attribute group by stopword, matchcutoff, groupby, domainsize;

    +----------+-------------+---------+------------+-------+
    | stopword | matchcutoff | groupby | domainsize | count |
    +----------+-------------+---------+------------+-------+
    |        0 |        0.00 | size    |        300 | 19620 |
    +----------+-------------+---------+------------+-------+


sudo ./arrayattributedaemon.pl -d swissprot -g size -s 300 -t 20 -w


sudo ./arrayattributedaemon.pl -d swissprot -t 20 -g size -s 300 -m 0.5


sudo ./arrayattributedaemon.pl -d swissprot -t 20 -g size -s 300 -m 1



16. Load 'attribute' onto cluster
==============================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t attribute


17. Populate 'nfold' table (with N-fold permutations)
=====================================================

#### DEPRECATED. USE arraynfolddaemon.pl
#
#./nfold.pl -d swissprot -g size -s 300
#
#    Completed ./nfold.pl
#    Run time: 00:09:06
#    0:44AM, 2 April 2008
#    ****************************************


sudo ./arraynfolddaemon.pl -d swissprot -g size -s 300 -t 20

    Run time: 00:02:47
    Completed ./arraynfolddaemon.pl
    5:42PM, 2 April 2008
    ****************************************

    select stopword, matchcutoff, groupby, domainsize, count(distinct collectionid) AS count FROM nfold group by stopword, matchcutoff, groupby, domainsize;
    +----------+-------------+---------+------------+-------+
    | stopword | matchcutoff | groupby | domainsize | count |
    +----------+-------------+---------+------------+-------+
    |        0 |        0.00 |         |          0 | 18604 |
    +----------+-------------+---------+------------+-------+
    
sudo ./arraynfolddaemon.pl -d swissprot -g size -s 300 -t 20 -w


sudo ./arraynfolddaemon.pl -d swissprot -t 20 -g size -s 300 -m 0.5


sudo ./arraynfolddaemon.pl -d swissprot -t 20 -g size -s 300 -m 1


18. Load 'nfold' onto cluster
=============================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t nfold


19. Populate 'treelearning' table (do decision trees)
=====================================================

INPUT:  attribute, nfold

./arraytreelearningdaemon.pl -d swissprot -g size -s 300

    Run time: 00:04:28
    Completed ./arraytreelearningdaemon.pl
    11:30PM, 2 April 2008
    ****************************************
    
    SELECT COUNT(DISTINCT collectionid) FROM treelearning;
    +------------------------------+
    | COUNT(DISTINCT collectionid) |
    +------------------------------+
    |                        13159 |
    +------------------------------+

    select stopword, matchcutoff, groupby, domainsize, avg(correct) from treelearning group by stopword, matchcutoff, groupby, domainsize;
    +----------+-------------+---------+------------+--------------+
    | stopword | matchcutoff | groupby | domainsize | avg(correct) |
    +----------+-------------+---------+------------+--------------+
    |        0 |        0.00 | size    |        300 |       0.9712 |
    +----------+-------------+---------+------------+--------------+

sudo ./arraytreelearningdaemon.pl -d swissprot -g size -s 300 -t 20 -w


sudo ./arraytreelearningdaemon.pl -d swissprot -t 20 -g size -s 300 -m 0.5


sudo ./arraytreelearningdaemon.pl -d swissprot -t 20 -g size -s 300 -m 1


18. Load 'nfold' onto cluster
=============================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t treelibrary



20. Populate 'treelibrary' (extract best trees)
===============================================

INPUT: treelearning

./treelibrary.pl -d swissprot -g size -s 300

    Completed ./treelibrary.pl
    Run time: 00:00:08
    1:02AM, 3 April 2008
    ****************************************

    select stopword, matchcutoff, groupby, domainsize, COUNT(distinct collectionid) AS count from treelibrary group by groupby, domainsize, stopword, matchcutoff;

    +----------+-------------+---------+------------+-------+
    | stopword | matchcutoff | groupby | domainsize | count |
    +----------+-------------+---------+------------+-------+
    |        0 |        0.00 | size    |        300 | 13159 |
    +----------+-------------+---------+------------+-------+



21. POPULATE treedomain TO STORE DOMAIN POSITIONS BY GROUPBY AND DOMAINSIZE
===========================================================================

INPUT: domain


./treedomain.pl -d swissprot

    Completed ./treedomain.pl
    Run time: 00:01:01
    1:12AM, 3 April 2008
    ****************************************

    select stopword, matchcutoff, groupby, domainsize, COUNT(distinct collectionid) AS count from treedomain group by groupby, domainsize, stopword, matchcutoff;
    +----------+-------------+---------+------------+-------+
    | stopword | matchcutoff | groupby | domainsize | count |
    +----------+-------------+---------+------------+-------+
    |        0 |        0.00 | size    |        300 | 13159 |
    +----------+-------------+---------+------------+-------+




22. Load 'treedomain' onto cluster
==================================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t treedomain






23. POPULATE treebranch TO CREATE A QUICK LOOKUP TABLE OF SUCCESSIVE MOTIF PAIRS IN QUERY SEQUENCES
===================================================================================================

sudo ./arraytreebranchdaemon.pl -d swissprot -g size -s 300 -t 20
    
    Run time: 00:07:01
    Completed ./arraytreebranchdaemon.pl
    5:07PM, 3 April 2008
    ****************************************

    select stopword, matchcutoff, groupby, domainsize, COUNT(distinct collectionid) AS count from treebranch group by groupby, domainsize, stopword, matchcutoff;
    +----------+-------------+---------+------------+-------+
    | stopword | matchcutoff | groupby | domainsize | count |
    +----------+-------------+---------+------------+-------+
    |        0 |        0.00 | size    |        300 | 12879 |
    +----------+-------------+---------+------------+-------+


        fromvalue   :   targetnames OF ALL DISTINCT IPRSCAN MOTIFS IN THE SEQUENCE
                        WHICH FALL WITHIN THE **CURRENT** treedomain, ADJUSTED BY POSITION
                        IN THE iprscansetalignment
    
        tovalue     :   targetnames OF ALL DISTINCT IPRSCAN MOTIFS IN THE SEQUENCE
                        WHICH FALL WITHIN THE **NEXT** treedomain, ADJUSTED BY POSITION
                        IN THE iprscansetalignment




22. Load 'treebranch' onto cluster
==================================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t treebranch






23. Test Swissprot trees using Swissprot
========================================

REQUIRES swissprot.treebranch TABLE ON CLUSTER


#### 1. Sample sequences randomly from the 'swissprot' collection.

sudo ./samplecollection.pl -d swissprot -t subswiss -n 1000 


#### 2. Get the iprscans for the sampled sequences.

./samplecollectioniprscan.pl -d subswiss -n 1000 


#### 3. Load sample collection to cluster

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d subswiss -t collection,collectioniprscan


#### 4. Test for lookups

cd ~/FUNNYBASE/bin/signature
sudo ./arraytreelookupdaemon.pl -d subswiss -t swissprot -g size -s 300 -n 20


#### RESULT: 939 HITS OUT OF 984!!

USE subswiss;
select count(distinct collectionid) from treelookup;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                          984 |
+------------------------------+
1 row in set (0.01 sec)

select count(distinct collectionid) from treelookup where collectionid = targetid;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                          939 |
+------------------------------+


AGAIN WITH 10,000 SEQUENCES subswiss2
=====================================

#### 1. Sample sequences randomly from the 'swissprot' collection.

sudo ./samplecollection.pl -d swissprot -t subswiss2 -n 10000 
    
    Run time: 00:00:37
    Completed ./samplecollection.pl
    1:42AM, 4 April 2008
    ****************************************

#### 2. Get the iprscans for the sampled sequences.

./samplecollectioniprscan.pl -d swissprot -t subswiss2 

    Run time: 00:01:20
    Completed ./samplecollectioniprscan.pl
    1:46AM, 4 April 2008
    ****************************************

#### 3. Load sample collection to cluster

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d subswiss2 -t collection,collectioniprscan


#### 4. Test for lookups

cd ~/FUNNYBASE/bin/signature
sudo ./arraytreelookupdaemon.pl -d subswiss2 -t swissprot -g size -s 300 -n 20

    select count(distinct collectionid) from treelookup;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                         9733 |
    +------------------------------+
    1 row in set (0.09 sec)
    
    select count(distinct collectionid) from treelookup where collectionid = targetid;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                         9348 |
    +------------------------------+

    
#### 5. DO treealign:

cd ~/FUNNYBASE/bin/signature
sudo ./arraytreealigndaemon.pl -d subswiss2 -t swissprot -g size -s 300 -n 20

    Run time: 10:32:12
    Completed ./arraytreealigndaemon.pl
    4:59PM, 7 April 2008
    ****************************************


#### 6. LOAD ALIGNMENT FILES INTO treealign

cd ~/FUNNYBASE/bin/signature
./arraytreealignloaddata.pl -d subswiss2 -t swissprot

    Run time: 00:55:22
    Completed ./arraytreealignloaddata.pl
    6:03PM, 7 April 2008
    ****************************************


#### 7. Load subswiss2 'treelookup,treealign' to cluster 

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d subswiss2 -t treelookup

/common/bin/dsh -a cp /common/mysql/data/subswiss2/treealign.MYD /private/var/mysql/subswiss2/treealign.MYD
Time: 00:46:59


(AND swissprot.treealign IF NOT LOADED PREVIOUSLY)

#sudo ./clusterloadtable.pl -d swissprot -t treelibrary




#### 8. TEST PREDICTIONS


cd ~/FUNNYBASE/bin/swissprot
sudo ./arraytreepredictdaemon.pl -d subswiss2 -t swissprot -g size -s 300 -T 20
    
    Run time: 00:24:14
    Completed ./arraytreepredictdaemon.pl
    8:35PM, 7 April 2008
    ****************************************


select count(*) from treepredict;
+----------+
| count(*) |
+----------+
|    45280 |
+----------+

select count(distinct collectionid) from treepredict;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                         8903 |
+------------------------------+

select count(distinct collectionid) from treepredict where collectionid = targetid;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                         7185 |
+------------------------------+

select count(distinct collectionid) from treepredict where collectionid = targetid and prediction = 1;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                         6251 |
+------------------------------+

select count(distinct collectionid) from treepredict where collectionid != targetid and prediction = 1;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                         6583 |
+------------------------------+

select count(*) from treepredict where collectionid = targetid and prediction = 1;
+----------+
| count(*) |
+----------+
|     9132 |
+----------+

select count(*) from treepredict where collectionid != targetid and prediction = 1;
+----------+
| count(*) |
+----------+
|    23033 |
+----------+

select count(distinct collectionid, targetid) from treepredict where collectionid != targetid and prediction = 1;
+----------------------------------------+
| count(distinct collectionid, targetid) |
+----------------------------------------+
|                                  16637 |
+----------------------------------------+


GET THE NON-OVERLAPPING PORTION OF CORRECTLY IDENTIFYING collectionids THAT DON'T ALSO HAVE WRONG TARGET PREDICTIONS:

# CREATE correctpredict:

drop table correctpredict;
create table correctpredict (collectionid int(8));
insert into correctpredict select distinct collectionid from treepredict where collectionid = targetid;
# Query OK, 7185 rows affected (0.12 sec)


# CREATE wrongpredict:

drop table wrongpredict;
create temporary table wrongpredict (collectionid int(8));
insert into wrongpredict select distinct collectionid from treepredict where collectionid != targetid and prediction = 1;
# Query OK, 6583 rows affected (0.13 sec)


# GET collectionids IN correctpredict BUT NOT IN wrongpredict:

select correctpredict.collectionid FROM correctpredict LEFT JOIN wrongpredict
ON correctpredict.collectionid = wrongpredict.collectionid
WHERE wrongpredict.collectionid IS NULL;

+--------------+
| collectionid |
+--------------+
|            4 |
|           16 |
|           26 |
|           86 |
|           89 |
|           94 |
...
|        32946 |
|        32949 |
|        32951 |
|        32954 |
|        32964 |
|        32987 |
|        33028 |
|        33049 |
|        33053 |
+--------------+
1837 rows in set (3 min 26.05 sec)



# GET collectionids THAT ARE NOT IN correctpredict :

XXXX BAD QUERY? XXXX

select treepredict.collectionid FROM treepredict LEFT JOIN correctpredict
ON treepredict.collectionid = correctpredict.collectionid
WHERE correctpredict.collectionid IS NULL;
6553 rows in set (23 min 39.58 sec)

XXXX BAD QUERY? XXXX

23. Test Swissprot trees using fragments of Swissprot
=====================================================


#### 1. Create databases containing portions of the randomly sampled swissprot sequences.

./subcollection.pl -d subswiss2 -t subswiss2b500 -p begin -l 500 -D
                    
    Run time: 00:00:22
    Completed ./subcollection.pl
    10:22PM, 4 April 2008
    ****************************************
    
        -d source_database  :   contains original sequences
        -l length           :   subsequence length (bp) (= original gene length if shorter)
        -p position         :   position of subsequence (begin|stop|middle|random)
        -D drop_table       :   drop table ( delete all data)
        -h help             :   print help info

    
    USE subswiss2b500
    select avg(length(sequence)) from collection;
    +-----------------------+
    | avg(length(sequence)) |
    +-----------------------+
    |              482.4934 |
    +-----------------------+

    
#### 2. Get iprscans for the sampled subsequences.

./subcollectioniprscan.pl -d subswiss2 -t subswiss2b500

    Run time: 00:01:08
    Completed ./subcollectioniprscan.pl
    4:13PM, 5 April 2008
    ****************************************

    USE subswiss2b500
    select count(distinct collectionid) from collectioniprscan;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                         9188 |
    +------------------------------+

#### 3. Load 'collection,collectioniprscan' to cluster

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d subswiss2b500 -t collection,collectioniprscan


#### 4. Test for lookups

cd ~/FUNNYBASE/bin/signature
sudo ./arraytreelookupdaemon.pl -d subswiss2b500 -t swissprot -g size -s 300 -n 20

    Run time: 00:12:44
    Completed ./arraytreelookupdaemon.pl
    11:16PM, 4 April 2008
    ****************************************

    select count(distinct collectionid) from treelookup;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                         8620 |
    +------------------------------+

    select count(distinct collectionid) from treelookup where collectionid = targetid;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                         8050 |
    +------------------------------+


#### 5. DO treealign:

cd ~/FUNNYBASE/bin/signature
sudo ./arraytreealigndaemon.pl -d subswiss2b500 -t swissprot -g size -s 300 -n 20

    Run time: 09:30:12
    Completed ./arraytreealigndaemon.pl
    10:43AM, 5 April 2008
    ****************************************



#### 6. LOAD ALIGNMENT FILES INTO treealign

cd ~/FUNNYBASE/bin/signature
./arraytreealignloaddata.pl -d subswiss2b500 -t swissprot

    Run time: 00:20:42
    Completed ./arraytreealignloaddata.pl
    1:56PM, 5 April 2008
    ****************************************



#### 7. Load 'treelookup,treealign' to cluster AND swissprot.treealign

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d subswiss2b500 -t treealign

sudo ./clusterloadtable.pl -d swissprot -t treelibrary


#### 8. TEST PREDICTIONS


cd ~/FUNNYBASE/bin/signature
./arraytreepredictdaemon.pl -d subswiss2b500 -t swissprot -g size -s 300 -t 20
    
    Run time: 00:20:20
    Completed ./arraytreepredictdaemon.pl
    0:52AM, 6 April 2008
    ****************************************













1. Test Swissprot trees using UniGene
=====================================


Compare with BLAST results:

0   :   mismatch
1   :   match
2   :   not enough information to decide whether match or mismatch (e.g., only clone number)
3   :   match annotation is 'hypothetical', 'predicted' (i.e., based on sequence similarity to another database)


~/FUNNYBASE/pipeline/unigene/collection/unigene.blastevalueannotationverifymanual.tsv


1. Populate 'arraytreelookup'
=============================

    USE INTERPRO MOTIFS OF QUERY SEQUENCE, SEGREGATED BY DOMAINS IN treedomain, TO LOOKUP    
    MOTIF PAIRS IN treebranch TABLE. ORDER BY NUMBER OF CORRECT CONSECUTIVE PAIRS.
    

cd ~/FUNNYBASE/bin/signature
sudo ./arraytreelookupdaemon.pl -d unigene -t swissprot -g size -s 300 -n 20



    select collectionid, targetid, hits, sourceannotation, targetannotation  from treelookup into outfile '/private/var/tmp/unigeneblast-unigene.treelookup.summary.tsv';

sudo mv /private/var/tmp/unigeneblast-unigene.treelookup.ssummary.tsv /Users/young/FUNNYBASE/pipeline/unigeneblast/collection/unigeneblast-unigene.treelookup.summary.tsv

SUMMARY FILE:
/Users/young/FUNNYBASE/pipeline/unigeneblast/collection/unigeneblast-unigene.treelookup.summary.tsv


3. DO treealign:

sudo ./arraytreealigndaemon.pl -d unigene -t swissprot -g size -s 300 -n 20




6. LOADED ALIGNMENT FILES INTO treealign


./arraytreealignloaddata.pl -d unigene -t swissprot


    Run time: 00:01:08
    Completed ./arraytreealignloaddata.pl
    1:20AM, 16 February 2008
    ****************************************

7. TEST PREDICTIONS

./treepredict.pl -d unigene -t swissprot -g size -s 300

    















</entry>



<entry [Tue Mar 25 10:18:51 EDT 2008] DELETE ALL .aln FILES FOR collectionids WHERE THERE ARE MORE THAN 2 collectionaccessions AND REDO WITH NEW iprscansetsequence >





1. GET collectionids WITH > 2 collectionaccessions

    DROP TABLE IF EXISTS multiple;
    CREATE TABLE multiple( collectionid INT(8), count INT(6));
    INSERT INTO multiple
    SELECT collectionid, count(collectionaccession ) as count FROM collection GROUP BY collectionid HAVING count > 2 ORDER BY count desc;
    
    Query OK, 16426 rows affected (0.47 sec)

2. MOVE ALL .aln FILES FOR collectionids WITH > 2 collectionaccessions TO clustalw.multiple DIRECTORY

    #!/usr/bin/perl -w
    ...
    my $query = qq{SELECT collectionid FROM multiple};
    my $ids = Database($dbh, $query);
    foreach my $collection_id ( $ids )
    {
        #### RM COMMAND
    
        my $rm_command = "rm -fr $clustalw_dir/$database.iprscansetalignment.$collection_id.in.aln $clustalw_dir/$database.iprscansetalignment.$collection_id.dnd";
        print "RM COMMAND: $rm_command\n";
        #`$rm_command`;
    }


3. DO MULTIPLE ALIGNMENTS WITH NEW arrayswissprotmultialigndaemon.pl

    sudo ./arrayswissprotmultialigndaemon.pl -d swissprot -n 20

    ~ 2 hrs


4. REDO iprscanset

    1. FILTER OUT sourceaccessions FOR collectionid

    2. USE IPRSCAN targetids FOR UP TO 20 collectionaccessions FOR collectionid

    3. COLLECT UP TO 100 SWISSPROT ACCESSIONS

sudo ./arrayswissprotiprscansetdaemon.pl -d swissprot -s nucleotide -t 20

    Run time: 03:54:14
    Completed ./arrayswissprotiprscansetdaemon.pl
    6:23AM, 25 March 2008
    ****************************************


5. REDO iprscansetsequence

    1. TAKE UP TO 20 sourceaccessions PER collectionid

    2. TAKE UP TO 40 SWISSPROT ACCESSIONS

./arrayswissprotiprscansetsequence.pl -d swissprot -t 20


6. DO REMAINING ALIGNMENTS WITH NEW iprscansetsequence:

    1. USE UP TO 20 collectionaccessions FROM collection
    
    2. ALL collectionaccessions LABELED AS '1'
    
    3. EXCLUDE ALL collection sourceaccessions FROM SWISSPROT ACCESSIONS

    4. ALL SWISSPROT ACCESSIONS LABELLED AS '0'


7. POPULATE setlabel USING DIFFERENT VALUES OF FUZZY MATCH CUTOFF (NONE, 0-1)

    1. ONLY LABEL sourceaccessions AS '1' (ALL SWISSPROT ACCESSIONS ARE '0'):
    
    ./arrayswissprotsetlabel.pl -d swissprot
    
    2. LABEL ALL sourceaccessions AS 1, AND ANY SWISSPROT ACCESSIONS THAT 
    
    MATCH THE sourceaccessions AFTER USING STOPWORDS (I.E., REMOVE 'protein',
    
    'precursor', etc.):
    
    ./arrayswissprotsetlabel.pl -d swissprot -s


    3. FUZZY MATCH OF 1 (NB: ALL FUZZY MATCHES INCLUDE USING STOPWORDS):
    
    ./arrayswissprotsetlabel.pl -d swissprot -c 1
    
    
    4. FUZZY MATCH OF 0.5 (NB: ALL FUZZY MATCHES INCLUDE USING STOPWORDS):

    ./arrayswissprotsetlabel.pl -d swissprot -c 0.5










</entry>



<entry [Mon Mar 24 00:54:21 EDT 2008] CREATED arrayswissprotiprscansetsequence.pl TO USE ORIGINAL ACCESSIONS AS LABEL '1' AND ALL OTHERS AS LABEL '0'>








SELECT collectionid, count(collectionaccession ) as count FROM collection WHERE collectionid < 500 GROUP BY collectionid HAVING count > 1 ORDER BY count desc;
+--------------+-------+
| collectionid | count |
+--------------+-------+
|          336 |   128 |
|          430 |    57 |
|          422 |    50 |
|          126 |    29 |
|          328 |    25 |
|          373 |    15 |
|          380 |    15 |
|           32 |    14 |
|           89 |    14 |
|          385 |    11 |
|          379 |    10 |
|           62 |     8 |
|           72 |     8 |
...
|          458 |     2 |
|          460 |     2 |
|          482 |     2 |
|          490 |     2 |
|          493 |     2 |
+--------------+-------+
136 rows in set (0.01 sec)

SELECT collectionid, count(collectionaccession ) as count FROM collection WHERE collectionid < 500 GROUP BY collectionid HAVING count > 2 ORDER BY count desc;

|          393 |     3 |
|          398 |     3 |
|          414 |     3 |
|          415 |     3 |
|          448 |     3 |
|          456 |     3 |
|          459 |     3 |
|          463 |     3 |
|          491 |     3 |
+--------------+-------+
83 rows in set (0.00 sec)


SELECT distinct accession from iprscansetsequence where collectionid = 493;
+-----------+
| accession |
+-----------+
| 1         |
| 2         |
| Q5EA36    |
| Q5FVM4    |
| Q5JQF8    |
| Q5KBF5    |
| Q5KBW2    |
| Q5KNY5    |
| Q5M9F1    |
| Q5NVC8    |
| Q5NVH8    |
| Q5R469    |
| Q5R8F7    |
| Q5R9H4    |
| Q5RAY5    |
| Q5RBM8    |
| Q5RBR8    |
| Q5RF26    |
| Q5RFT7    |
| Q5RJM0    |
| Q5SZQ8    |
| Q5ZI72    |
| Q5ZL34    |
| Q5ZLP8    |
| Q5ZMA3    |
| Q60668    |
| Q62176    |
| Q62189    |
| Q62504    |
| Q64707    |
| Q66H68    |
| Q66J99    |
| Q6AYK1    |
| Q6BTS9    |
| Q6CDH3    |
| Q6DCB7    |
| Q6DEZ7    |
| Q6FKG4    |
| Q6IQE0    |
| Q6NV83    |
| Q6NVF9    |
| Q6NVP7    |
+-----------+
42 rows in set (0.00 sec)

select sourceaccession  from collection where collectionid = 493;
+-----------------+
| sourceaccession |
+-----------------+
| Q9NWB1          |
| Q9JJ43          |
+-----------------+




</entry>



<entry [Sun Mar 23 17:43:51 EDT 2008] CHECK iprscanset INCLUDES ORIGINAL SWISSPROT ACCESSION IN SET>



SELECT collectionaccession, sourceaccession, sourceannotation FROM collection where collectionid < 10;

SELECT accession, label, annotation FROM iprscanset WHERE collectionid < 10;

SELECT count(DISTINCT iprscanset.accession) FROM iprscanset, collection WHERE iprscanset.accession = collection.collectionaccession AND iprscanset.collectionid = collection.collectionid;

SELECT count(DISTINCT iprscanset.collectionid) FROM iprscanset, collection WHERE iprscanset.collectionid = collection.collectionid AND iprscanset.accession = collection.sourceaccession;
+-----------------------------------------+
| count(DISTINCT iprscanset.collectionid) |
+-----------------------------------------+
|                                     535 |
+-----------------------------------------+

select count(distinct collectionid) from iprscanset;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                         1036 |
+------------------------------+



CREATE TABLE WITH collectionids THAT DO NOT HAVE MATCHING ACCESSIONS IN iprscanset:

DROP TABLE iprscansetcorrectaccession;
CREATE TABLE iprscansetcorrectaccession ( collectionid INT(8) );
INSERT INTO iprscansetcorrectaccession
SELECT DISTINCT iprscanset.collectionid FROM iprscanset, collection WHERE iprscanset.collectionid = collection.collectionid AND iprscanset.accession = collection.sourceaccession;
Query OK, 535 rows affected (16.29 sec)

DROP TABLE iprscansetnoaccession;
CREATE TABLE iprscansetnoaccession ( collectionid INT(8) );
INSERT INTO iprscansetnoaccession
SELECT DISTINCT iprscanset.collectionid FROM iprscanset
LEFT JOIN iprscansetcorrectaccession
ON iprscansetcorrectaccession.collectionid = iprscanset.collectionid
WHERE iprscansetcorrectaccession.collectionid IS NULL;
Query OK, 501 rows affected (19 min 45.53 sec)


select * from iprscansetnoaccession limit 10;
+--------------+
| collectionid |
+--------------+
|            2 |
|            7 |
|            8 |
|           12 |
|           13 |
|           17 |
|           19 |
|           22 |
|           23 |
|           24 |
+--------------+


select collectionid, sourceaccession , sourceannotation from collection where collectionid < 11;
+--------------+-----------------+-------------------------------------------------------------------------+
| collectionid | sourceaccession | sourceannotation                                                        |
+--------------+-----------------+-------------------------------------------------------------------------+
|            1 | P15711          | 104 kDa microneme/rhoptry antigen precursor                             |
|            2 | Q43495          | Protein 108 precursor                                                   |
|            3 | P18646          | 10 kDa protein precursor                                                |
|            4 | P13813          | 110 kDa antigen                                                         |
|            5 | Q9XHP0          | 11S globulin seed storage protein 2 precursor                           |
|            6 | P19084          | 11S globulin seed storage protein G3 precursor                          |
|            7 | P13744          | 11S globulin subunit beta precursor [Contains: 11S globulin gamma chain |
|            8 | P32234          | GTP-binding protein 128up                                               |
|           10 | Q05349          | Auxin-repressed 12.5 kDa protein                                        |
+--------------+-----------------+-------------------------------------------------------------------------+


SELECT collectionid, accession, label FROM iprscansetsequence WHERE collectionid = 2;

 SELECT count(DISTINCT iprscansetsequence.collectionid) FROM iprscansetsequence, collection WHERE iprscansetsequence.collectionid = collection.collectionid AND iprscansetsequence.accession = collection.sourceaccession;
+-------------------------------------------------+
| count(DISTINCT iprscansetsequence.collectionid) |
+-------------------------------------------------+
|                                           37154 |
+-------------------------------------------------+

select count(distinct collectionid) from iprscansetsequence;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        67522 |
+------------------------------+



# CREATE TABLE WITH collectionids THAT DO NOT HAVE MATCHING ACCESSIONS IN iprscansetsequence:

DROP TABLE iprscansetsequencecorrectaccession;
CREATE TABLE iprscansetsequencecorrectaccession ( collectionid INT(8) );
INSERT INTO iprscansetsequencecorrectaccession
SELECT DISTINCT iprscansetsequence.collectionid FROM iprscansetsequence, collection WHERE iprscansetsequence.collectionid = collection.collectionid AND iprscansetsequence.accession = collection.sourceaccession;
Query OK, 37154 rows affected (7.07 sec)


DROP TABLE iprscansetsequencenoaccession;
CREATE TABLE iprscansetsequencenoaccession ( collectionid INT(8) );
INSERT INTO iprscansetsequencenoaccession
SELECT DISTINCT iprscansetsequence.collectionid FROM iprscansetsequence
LEFT JOIN iprscansetsequencecorrectaccession
ON iprscansetsequencecorrectaccession.collectionid = iprscansetsequence.collectionid
WHERE iprscansetsequencecorrectaccession.collectionid IS NULL;




</entry>



<entry [Mon Mar 17 14:35:51 EDT 2008] DO signature WORKFLOW FOR swissprot>



1. POPULATE swissprot.collection TABLE 
======================================

sudo ./arrayswissprotcollectiondaemon.pl -d swissprot -s nucleotide -t 20

~ 3 HOURS

    select count(distinct collectionid) from collection;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                        88410 |
    +------------------------------+

2. Load 'collection' onto cluster
=================================

cd ~/FUNNYBASE/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t collection

ON gems:

sudo chmod 755 /common/pipeline/swissprot/collection/clusterloadtable.sh
sudo /common/pipeline/swissprot/collection/clusterloadtable.sh
sudo dsh -a "ps aux | grep mysql"


3. Load InterPro hits into 'collectioniprscan' table from 'indexer.swissprotiprscan'
====================================================================================

sudo ./arrayswissprotcollectioniprscandaemon.pl -d swissprot -t 20

    Run time: 00:03:01
    Completed ./arrayswissprotcollectioniprscandaemon.pl
    8:51PM, 16 March 2008
    ****************************************
    
    select count(distinct collectionid) from collectioniprscan;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                        67953 |
    +------------------------------+


4. Load 'collectioniprscan' onto cluster
========================================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t collectioniprscan

ON gems:

sudo chmod 755 /common/pipeline/swissprot/collection/clusterloadtable.sh
sudo /common/pipeline/swissprot/collection/clusterloadtable.sh
sudo dsh -a "ps aux | grep mysql"


5. GET IPRSCAN SET 
==================

sudo ./arrayiprscansetdaemon.pl -d swissprot -s nucleotide -t 20 
    
    Run time: 03:54:14
    Completed ./arrayswissprotiprscansetdaemon.pl
    6:23AM, 25 March 2008
    ****************************************
    
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                        62902 |
    +------------------------------+
    1 row in set (6 min 31.15 sec)
    

6. Load 'iprscanset' onto cluster
=================================

cd /common/myEST/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t iprscanset

    Run time: 00:02:58
    Completed ./clusterloadtable.pl
    12:23AM, 17 March 2008
    ****************************************


7. GET IPRSCAN SET SEQUENCES
============================

sudo ./arrayiprscansetsequencedaemon.pl -d swissprot -s nucleotide -t 20

    Run time: 00:18:24
    Completed ./arrayiprscansetsequencedaemon.pl
    2:29PM, 17 March 2008
    ****************************************

    select count(distinct collectionid) from iprscansetsequence;    
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                        67522 |
    +------------------------------+
    
    
8. GET IPRSCAN SET MULTIPLE ALIGNMENT
=====================================

sudo ./arrayiprscansetalignmentdaemon.pl -d swissprot -n 20

    44,000 DONE
 
    Run time: 150:32:39
    Completed ./arrayiprscansetalignmentdaemon.pl
    9:20PM, 23 March 2008
    ****************************************




9. LOAD MULTIPLE ALIGNMENTS
===========================

./arrayiprscansetalignmentloaddata.pl -d swissprot
    
    Run time: 00:00:04
    Completed ./arrayiprscansetalignmentloaddata.pl
    6:46PM, 6 February 2008
    ****************************************
    
    select count(distinct collectionid) from iprscansetalignment;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                          158 |
    +------------------------------+
    
    
10. LOAD iprscanset AND iprscansetalignment TABLES TO CLUSTER
=============================================================

cd ~/FUNNYBASE/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t iprscanset,iprscansetalignment

ON gems:

sudo chmod 755 /common/pipeline/swissprot/collection/clusterloadtable.sh
sudo /common/pipeline/swissprot/collection/clusterloadtable.sh
sudo dsh -a "ps aux | grep mysql"


11. DO SUPERDOMAINS
===================

sudo ./arrayiprscansuperdomaindaemon.pl -d swissprot -t 20
                    
    Run time: 00:00:27
    Completed ./arrayiprscansuperdomaindaemon.pl
    7:14PM, 6 February 2008
    ****************************************

12. LOAD SUPERDOMAINS
=====================

./arrayiprscansuperdomainloaddata.pl -d swissprot -t 20
            
    Run time: 00:00:01
    Completed ./arrayiprscansuperdomainloaddata.pl
    10:34PM, 6 February 2008
    ****************************************    

    select count(distinct collectionid) from iprscansuperdomain;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                          158 |
    +------------------------------+
    

13. Populate 'iprscanattributebayes' table with BALANCED SET of negative and positive instances
===============================================================================================

./iprscanattributebayes.pl -d swissprot
        
    Completed ./iprscanattributebayes.pl
    Run time: 00:00:13
    10:35PM, 6 February 2008
    ****************************************

    select count(distinct collectionid) from iprscanattributebayes; 
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                          158 |
    +------------------------------+

14. DO N-FOLD PERMUTATIONS
==========================

./nfoldbayes.pl -d swissprot

    Completed ./nfoldbayes.pl
    Run time: 00:00:03
    10:36PM, 6 February 2008
    ****************************************

    select count(distinct collectionid) from nfoldbayes;
    +------------------------------+
    | count(distinct collectionid) |
    +------------------------------+
    |                          158 |
    +------------------------------+
    
    
15. Load TABLES onto cluster
============================

TABLES:
iprscansetsequence
iprscanattributebayes
iprscansuperdomain 


cd ~/FUNNYBASE/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t iprscansetsequence,iprscansuperdomain,iprscanattributebayes


ON gems:

sudo chmod 755 /common/pipeline/swissprot/collection/clusterloadtable.sh

sudo /common/pipeline/swissprot/collection/clusterloadtable.sh

sudo dsh -a "ps aux | grep mysql"



16. Populate 'iprscanattribute' table
=====================================

INPUTS:

collectioniprscan TABLE     (already loaded for arrayiprscanset.pl)
iprscanset TABLE            (already loaded for arrayiprscansuperdomain.pl)
iprscansetalignment TABLE   (already loaded for arrayiprscansuperdomain.pl)
iprscansetsequence TABLE
iprscansuperdomain TABLE
iprscanattributebayes TABLE


USING:

sudo ./signaturecommandengine.pl -d swissprot

/Users/young/FUNNYBASE/bin/signature/arrayiprscanattributedaemon.pl -d swissprot -g iprscan -t 20
/Users/young/FUNNYBASE/bin/signature/loadiprscanattribute.pl -d swissprot -t 20

/Users/young/FUNNYBASE/bin/signature/arrayiprscanattributedaemon.pl -d swissprot -g size -s 100 -t 20
/Users/young/FUNNYBASE/bin/signature/loadiprscanattribute.pl -d swissprot -t 20
/Users/young/FUNNYBASE/bin/signature/arrayiprscanattributedaemon.pl -d swissprot -g size -s 150 -t 20
/Users/young/FUNNYBASE/bin/signature/loadiprscanattribute.pl -d swissprot -t 20
/Users/young/FUNNYBASE/bin/signature/arrayiprscanattributedaemon.pl -d swissprot -g size -s 300 -t 20
/Users/young/FUNNYBASE/bin/signature/loadiprscanattribute.pl -d swissprot -t 20

/Users/young/FUNNYBASE/bin/signature/arrayiprscanattributedaemon.pl -d swissprot -g both -s 100 -t 20
/Users/young/FUNNYBASE/bin/signature/loadiprscanattribute.pl -d swissprot -t 20
/Users/young/FUNNYBASE/bin/signature/arrayiprscanattributedaemon.pl -d swissprot -g both -s 150 -t 20
/Users/young/FUNNYBASE/bin/signature/loadiprscanattribute.pl -d swissprot -t 20
/Users/young/FUNNYBASE/bin/signature/arrayiprscanattributedaemon.pl -d swissprot -g both -s 300 -t 20
/Users/young/FUNNYBASE/bin/signature/loadiprscanattribute.pl -d swissprot -t 20

    select distinct groupby, domainsize from iprscanattribute;
    +---------+------------+
    | groupby | domainsize |
    +---------+------------+
    | iprscan |          0 |
    | size    |        100 |
    | size    |        150 |
    | size    |        300 |
    +---------+------------+


17. DO DECISION TREES
=====================

USING:

sudo ./signaturecommandengine.pl -d swissprot

/Users/young/FUNNYBASE/bin/signature/learningtrees.pl -d swissprot -g iprscan
/Users/young/FUNNYBASE/bin/signature/learningtrees.pl -d swissprot -g size -s 100
/Users/young/FUNNYBASE/bin/signature/learningtrees.pl -d swissprot -g size -s 150
/Users/young/FUNNYBASE/bin/signature/learningtrees.pl -d swissprot -g size -s 300
/Users/young/FUNNYBASE/bin/signature/learningtrees.pl -d swissprot -g both -s 100
/Users/young/FUNNYBASE/bin/signature/learningtrees.pl -d swissprot -g both -s 150
/Users/young/FUNNYBASE/bin/signature/learningtrees.pl -d swissprot -g both -s 300


Tue Feb 12 15:08:33 EST 2008

select groupby, domainsize, avg(correct) from learningtrees group by groupby, domainsize;
+---------+------------+--------------+
| groupby | domainsize | avg(correct) |
+---------+------------+--------------+
| both    |        100 |       0.6495 |
| size    |        100 |       0.6575 |
| size    |        150 |       0.7194 |
| size    |        300 |       0.7523 |
+---------+------------+--------------+










</entry>



<entry [Sat Mar 15 15:24:12 EDT 2008] RUN sudo arrayswissprotcollection ON CLUSTER>




sudo ./arrayswissprotcollectiondaemon.pl -d swissprot -s nucleotide -t 1

~ 3 HOURS


 select count(distinct collectionid) from collection;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        88410 |
+------------------------------+

select count(distinct collectionid) from collectioniprscan;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        78030 |
+------------------------------+

select count(distinct collectionid) from iprscanset;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        64920 |
+------------------------------+
1 row in set (3 min 40.20 sec)



TRANSFERRED swissprot AND swissprotnt TO nodes AND COPIED addfulltext.pl TO /common/myEST/bin/utils ON gems WITH THE FOLLOWING CHANGES:

#### USE LIBRARIES
use lib "/common/myEST/lib";
.
.
.
#### GET CONF
my $conf = Util::conf("/common/myEST/conf");

THEN ADDED 'name' FULLTEXT TO swissprot

cd ../bin/utils/
sudo dsh -a "/common/myEST/bin/utils//addfulltext.pl -d indexer -t swissprot -f name -n name"






</entry>



<entry [Sat Feb 23 02:29:08 EST 2008] FIXED arrayiprscanset OVERSHOOT OF collectionids IN collectioniprscan>



select count(distinct collectionid) from collectioniprscan;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        78030 |
+------------------------------+

SO THIS QUERY ALWAYS OVERSHOT:

SELECT DISTINCT collectionid FROM collectioniprscan ORDER BY collectionid LIMIT 78592,100;
Empty set (0.00 sec)

 sudo ./arrayiprscansetdaemon.pl -d swissprot -t 18

    
    Printing script to script file: /common/pipeline/swissprot/collection/arrayiprscanset.sh ...done.
    qsub command: qsub -sync y -t 1-18 /common/pipeline/swissprot/collection/arrayiprscanset.sh
    Completed qsub. Job output:
    qsub command: qsub -sync y -t 1-18 /common/pipeline/swissprot/collection/arrayiprscanset.sh
    Completed qsub. Job output:
    
    Your job-array 1532211.1-18:1 ("arrayiprscanset.sh") has been submitted
    Job 1532211.15 exited with exit code 0.
    Job 1532211.11 exited with exit code 0.
    Job 1532211.13 exited with exit code 0.
    Job 1532211.9 exited with exit code 0.
    Job 1532211.3 exited with exit code 0.
    Job 1532211.10 exited with exit code 0.
    Job 1532211.18 exited with exit code 0.
    Job 1532211.17 exited with exit code 0.
    Job 1532211.16 exited with exit code 0.
    Job 1532211.6 exited with exit code 0.
    Job 1532211.14 exited with exit code 0.
    Job 1532211.4 exited with exit code 0.
    Job 1532211.2 exited with exit code 0.
    Job 1532211.12 exited with exit code 0.
    Job 1532211.5 exited with exit code 0.
    Job 1532211.7 exited with exit code 0.
    Job 1532211.1 exited with exit code 0.
    Job 1532211.8 exited with exit code 0.
    
    Job exit codes: 0 = Success, 99 = Requeue, Rest = Success: exit code in accounting file
    
    Dropping table 'iprscanset... done.
    Creating table 'iprscanset' if not exists... done.
    Loading data into table 'iprscanset'... Query failed: The table 'iprscanset' is full (1114)
    DID NOT LOAD!
    Query failed: The table 'iprscanset' is full (1114)
    DID NOT LOAD!
    Query failed: The table 'iprscanset' is full (1114)
    DID NOT LOAD!
    done.
    
    Run time: 06:14:02
    Completed ./arrayiprscansetdaemon.pl
    8:58AM, 23 February 2008
    ****************************************


RESET TABLE MAX SIZE:


CREATE TABLE IF NOT EXISTS iprscanset (
    
    collectionid    INT(6),
    
    label           INT(1),
    annotation      VARCHAR(255),
    
    accession           VARCHAR(20) NOT NULL,
    id              VARCHAR(20) NOT NULL,
    targetsource    VARCHAR(20) NOT NULL default '',
    targetid        VARCHAR(20) NOT NULL,
    targetname      VARCHAR(200) NOT NULL,
    interproid      VARCHAR(10) NOT NULL default '',
    interproname    VARCHAR(200) NOT NULL default '',
    interprotype    VARCHAR(20) NOT NULL default '',
    hitscoredec     DECIMAL(4,2) NOT NULL,
    hitscoreexp     SMALLINT(4) NOT NULL,
    hitstatus       VARCHAR(1) NOT NULL,
    querystart      INT(8) NOT NULL default '0',
    querystop       INT(8) NOT NULL default '0',
    childlist       VARCHAR(255) NOT NULL default '',
    foundinlist     VARCHAR(255) NOT NULL default '',
    golist          TEXT,
    
    PRIMARY KEY (collectionid, accession, targetsource, targetid, targetname, interproid, hitscoredec, hitscoreexp, querystart, querystop)
)
max_rows = 200000000000
avg_row_length = 50;



RELOAD .TSV FILES:

sudo ./arrayiprscansetdaemon.pl -d swissprot -t 18

    Run time: 03:02:31
    Completed ./arrayiprscansetdaemon.pl
    0:50AM, 14 March 2008
    ****************************************



</entry>



<entry [Mon Feb 18 01:55:43 EST 2008] (From Notes-database-unigeneblast.txt) PARSE SWISSPROT NUCLEOTIDE SEQUENCES FROM cds.dat.gz FILE INTO swissprotnt TABLE AND DO id,accession FULLTEXT>




1. RUN swissprotnt


	NAME	swissprotnt
	
	PURPOSE
	
		CREATE THE swissprotnt TABLE FROM THE EMBL cds.data.gz FILE
		
	INPUT

		1. DOWNLOADED nt FILE:
		
			cd /swissprot.nucleotide
            wget ftp://ftp.ebi.ac.uk/pub/databases/embl/cds/cds.dat.gz

		2. gzcat BINARY

	OUTPUT
	
		1. swissprotnt TABLE
	
	NOTES

        CREATE TABLE IF NOT EXISTS swissprotnt
        (
            accession		VARCHAR(20),
            emblid          VARCHAR(20),
            sequence		LONGTEXT,
            sequence		LONGTEXT,

            PRIMARY KEY (accession, emblid)
        )

	USAGE

		./swissprotnt.pl [-h]
		
	EXAMPLES
	
./swissprotnt.pl -i /swissprot.nucleotide/cds.dat.gz

    496679 out of 12070000
    ...
    /Users/young/FUNNYBASE/pipeline/indexer/collection/indexer.swissprotnt.25.tsv
    ...
    RUN TIME: 00:16:13
    Completed ./swissprotnt.pl
    1:48AM, 18 February 2008
    ****************************************

    SELECT COUNT(*) from swissprotnt;
    +----------+
    | COUNT(*) |
    +----------+
    |   499916 |
    +----------+


2. DO emblid,accession FULLTEXT

cd ~/FUNNYBASE/bin/orthologues

./addfullte ./addfulltext.pl -d indexer -t swissprotnt -f emblid,accession -n ids

    Run time: 00:00:23
    Completed ./addfulltext.pl
    2:20AM, 18 February 2008
    ****************************************
    
    
3. CHECK ALL unigeneblast SWISSPROT SEQUENCES ARE IN THE swissprotnt TABLE

Only 15 collection ids of the 478 unigeneblast swissprot sequences do not have an entry in the swissprotnt table.


</entry>



<entry [Wed Feb 13 03:11:22 EST 2008] RUN TREE WORKFLOW FOR swissprot>



use swissprot;
show tables;
+---------------------+
| Tables_in_swissprot |
+---------------------+
| collection          |
| collectioniprscan   |
| iprscanset          |
+---------------------+

select count(distinct targetid) from swissprotinterpro;
+--------------------------+
| count(distinct targetid) |
+--------------------------+
|                    10001 |
+--------------------------+

select count(distinct accession) from swissprotmatch;
+---------------------------+
| count(distinct accession) |
+---------------------------+
|                    276372 |
+---------------------------+



3. LOAD THE collectioniprscan TABLE TO THE CLUSTER
==================================================

cd ~/FUNNYBASE/bin/utils
sudo ./clusterloadtable.pl -d swissprot -t collectioniprscan

    Run time: 00:00:57
    Completed ./clusterloadtable.pl
    3:15AM, 13 February 2008
    ****************************************

DO ON REMOTE:

sudo chmod 755 /common/pipeline/swissprot/collection/clusterloadtable.sh

sudo dsh -a /common/pipeline/swissprot/collection/clusterloadtable.sh

sudo dsh -a /common/bin/dsh -a mkdir -p /private/var/mysql/swissprot
sudo dsh -a /common/bin/dsh -a cp /common/mysql/data/swissprot/collectioniprscan.MYD /private/var/mysql/swissprot/collectioniprscan.MYD
sudo dsh -a /common/bin/dsh -a cp /common/mysql/data/swissprot/collectioniprscan.MYI /private/var/mysql/swissprot/collectioniprscan.MYI
sudo dsh -a /common/bin/dsh -a cp /common/mysql/data/swissprot/collectioniprscan.frm /private/var/mysql/swissprot/collectioniprscan.frm
sudo dsh -a /common/bin/dsh -a chmod -R 660 /private/var/mysql/swissprot
sudo dsh -a /common/bin/dsh -a chmod 700 /private/var/mysql/swissprot
sudo dsh -a /common/bin/dsh -a chown -R mysql:wheel /private/var/mysql/swissprot
sudo dsh -a /common/bin/dsh -a /common/myEST/bin/utils/restartmysql.pl

sudo dsh -a "ps aux | grep mysql"


Input/Output error:



sudo ./clusterloadtable.pl -d swissprot -t collectioniprscan
Password:
Table files: collectioniprscan.MYD collectioniprscan.MYI collectioniprscan.frm
Copying files for table 'collectioniprscan' to remote mysql data directory...
cp /usr/local/mysql/data/swissprot/collectioniprscan.MYD /common/mysql/data/swissprot/collectioniprscan.MYD
cp: /common/mysql/data/swissprot/collectioniprscan.MYD: Input/output error
cp /usr/local/mysql/data/swissprot/collectioniprscan.MYI /common/mysql/data/swissprot/collectioniprscan.MYI
cp: /common/mysql/data/swissprot/collectioniprscan.MYI: Input/output error
cp /usr/local/mysql/data/swissprot/collectioniprscan.frm /common/mysql/data/swissprot/collectioniprscan.frm
Finished copying
Commands (ON REMOTE):
/common/bin/dsh -a mkdir -p /private/var/mysql/swissprot
/common/bin/dsh -a cp /common/mysql/data/swissprot/collectioniprscan.MYD /private/var/mysql/swissprot/collectioniprscan.MYD
/common/bin/dsh -a cp /common/mysql/data/swissprot/collectioniprscan.MYI /private/var/mysql/swissprot/collectioniprscan.MYI
/common/bin/dsh -a cp /common/mysql/data/swissprot/collectioniprscan.frm /private/var/mysql/swissprot/collectioniprscan.frm
/common/bin/dsh -a chmod -R 660 /private/var/mysql/swissprot
/common/bin/dsh -a chmod 700 /private/var/mysql/swissprot
/common/bin/dsh -a chown -R mysql:wheel /private/var/mysql/swissprot
echo `pwd`
/common/bin/dsh -a /common/myEST/bin/utils/restartmysql.pl
Printing script to script file: /common/pipeline/swissprot/collection/clusterloadtable.sh ...done.
Script file printed:

/common/pipeline/swissprot/collection/clusterloadtable.sh

DO ON REMOTE:

sudo chmod 755 /common/pipeline/swissprot/collection/clusterloadtable.sh

sudo /common/pipeline/swissprot/collection/clusterloadtable.sh

sudo dsh -a "ps aux | grep mysql"


Run time: 00:00:22
Completed ./clusterloadtable.pl
3:53PM, 21 February 2008
****************************************



4. For each orthologue cluster, get Swissprot sequences with the same iprscans
==============================================================================

cd ~/FUNNYBASE/bin/signature
sudo ./arrayiprscansetdaemon.pl -d swissprot -t 18

select count(distinct collectionid) from iprscanset;
+------------------------------+
| count(distinct collectionid) |
+------------------------------+
|                        64920 |
+------------------------------+
1 row in set (3 min 40.20 sec)



</entry>



<entry [Tue Jan 22 19:26:19 EST 2008] DO SWISSPROT ORTHOLOGUES>



1. GET ORTHOLOGUE GROUPS ASSOCIATED WITH SWISSPROT UNIQUE ANNOTATIONS AND CREATE collection TABLE WITH ORTHOLOGUE GROUPS

./swissprotorthologues.pl

    Getting distinct name from 'swissprot' table...
    No. names: 88410

    /Users/young/FUNNYBASE/pipeline/swissprot/collection/swissprot.collection.tsv
    
    Dropping 'collection' if exists... done.
    Creating table 'collection'... done.
    Loading data into table 'collection'... done.
    Completed ./swissprotorthologues.pl
    Run time: 13:13:57
    12:22AM, 15 January 2008
    ****************************************

























    





