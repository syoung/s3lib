use MooseX::Declare;
use Method::Signatures::Simple;

use strict;
use warnings;

class Test::FilterReads extends FilterReads with Logger {

use FindBin qw($Bin);
use Test::More;
use JSON;

#####////}}}}}


#### Objects
has 'conf'		=> ( isa => 'Conf::Yaml', is => 'rw', lazy	=>	1, builder	=>	"setConf" );
has 'keyfile'		=> 	( isa => 'Str|Undef', is => 'rw', default	=>	"dummy" );


method testIsPairedBam {
	diag("workerBamIsAPair");
	$self->logDebug("");

	my $tests		=	[
#		{
#			expected	=>	1,
#			input		=>	qq{B20A31ABXX:8:22:16419:66033_1	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
#B20A31ABXX:8:22:16419:66033_2	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
#			name		=>	"paired align reads _ "
#		},
#		{
#			expected	=>	1,
#			input		=>	qq{B20A31ABXX:8:22:16419:66033/1	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
#B20A31ABXX:8:22:16419:66033/2	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
#			name		=>	"paired align reads / "
#		},
#		{
#			expected	=>	1,
#			input		=>	qq{B20A31ABXX:8:22:16419:66033	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
#B20A31ABXX:8:22:16419:66033	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
#			name		=>	"paired align reads identical headers "
#		},
#		{
#			expected	=>	0,
#			input		=>	qq{B20A71ABXX:8:22:16419:66033	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
#B20A31ABXX:8:22:16419:66033	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
#			name		=>	"paired align reads non identical headers"
#		},
#		{
#			expected	=>	0,
#			input		=>	qq{B20A31ABXX:8:22:16419:66033	70	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
#B20A31ABXX:8:22:16419:66033	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
#			name		=>	"paired align reads even flag"
#		},
#		{
#			expected	=>	1,
#			input		=>	qq{B20A31ABXX:8:22:16419:66033	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
#B20A31ABXX:8:22:16419:66033	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
#			name		=>	"paired align reads odd flag"
#		},
		{
			expected	=>	1,
			input		=>	qq{HWI-ST1326:101:D293EACXX:8:1105:1259:93266      2145    chrM    1       11      53H36M12H       =       16389   16474   GATCACAGGTCTATCACCCTATTAACCACTCACGGG    6DD>(8))=)7=CC:?EEA;BB##############    NM:i:0  MD:Z:36 AS:i:36 XS:i:0  RG:Z:64020cde-8660-11e4-9f95-ebb39932a4ca       SA:Z:chrM,16519,+,53M48S,11,0;
HWI-ST1326:101:D293EACXX:8:1105:2676:58504      2147    chrM    1       60      41M60H  =       16382   16427   GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTC       ??;DD?AA:+2:C?AFGIG;FFCACB92<AFF<GGF:?)?D       NM:i:0  MD:Z:41 AS:i:41 XS:i:0  RG:Z:64020cde-8660-11e4-9f95-ebb39932a4ca       SA:Z:chrM,16382,+,38S46M17S,60,0;
},
			name		=>	"paired - odd flag"
		}
		
	];
	
	foreach my $test ( @$tests ) {
		my $expected = $test->{expected};
		my $input = $test->{input};
		my $name = $test->{name};
		
		$self->logDebug("expected", $expected);
		$self->logDebug("input",$input);
		$self->logDebug("name",$name);
		
		no warnings;
		
		*getBamLines=sub{
			
			return $input;
			
		};
		my $result = $self->isPairedBam("dummy");
		$self->logDebug("result", $result);
		
		ok($result eq $expected, $name);
		
	}
		#BamIsAPairment failed for UUID $uuid in location $location

	
	
	
}




} #### end

