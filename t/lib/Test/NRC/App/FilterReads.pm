use MooseX::Declare;

use strict;
use warnings;

class Test::NRC::App::FilterReads extends NRC::App::FilterReads with Logger {

use FindBin qw($Bin);
use Test::More;
use JSON;

#####////}}}}}


#### Objects
has 'conf'		=> ( isa => 'Conf::Yaml', is => 'rw', lazy	=>	1, builder	=>	"setConf" );
has 'keyfile'		=> 	( isa => 'Str|Undef', is => 'rw', default	=>	"dummy" );


method testBamIsAPair {
	diag("workerBamIsAPair");
	$self->logDebug("");

	$self->conf()->inputfile("$Bin/inputs/config.yaml");
	my $basedir		=	"$Bin/inputs";
	my $locations	=	$self->conf()->getKey("pancancer:locations", undef);
	$self->conf()->memory(1);
	foreach my $location ( @$locations ) {
		$location	= "$basedir/$location";
	}
	$self->conf()->setKey("pancancer", "locations", $locations);

	my $tests		=	[
		{
			expected	=>	1,
			input		=>	qq{B20A31ABXX:8:22:16419:66033_1	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
B20A31ABXX:8:22:16419:66033_2	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
			name		=>	"paired align reads _ "
		},
		{
			expected	=>	1,
			input		=>	qq{B20A31ABXX:8:22:16419:66033/1	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
B20A31ABXX:8:22:16419:66033/2	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
			name		=>	"paired align reads / "
		},
		{
			expected	=>	1,
			input		=>	qq{B20A31ABXX:8:22:16419:66033	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
B20A31ABXX:8:22:16419:66033	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
			name		=>	"paired align reads identical headers "
		},
		{
			expected	=>	0,
			input		=>	qq{B20A71ABXX:8:22:16419:66033	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
B20A31ABXX:8:22:16419:66033	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
			name		=>	"paired align reads non identical headers"
		},
		{
			expected	=>	0,
			input		=>	qq{B20A31ABXX:8:22:16419:66033	70	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
B20A31ABXX:8:22:16419:66033	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
			name		=>	"paired align reads even flag"
		},
		{
			expected	=>	1,
			input		=>	qq{B20A31ABXX:8:22:16419:66033	77	*	0	0	*	*	0	0	GGGGGGGGGGGGGGGGGGGAGTCGGGGGGGAAGGGGTGGGGAGTGGGCGGGGGAGGGGTTAGGTGAGTCGGAGAAGACGAGCTCGAGGTGTATGGGAGAA	aaaBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA
B20A31ABXX:8:22:16419:66033	141	*	0	0	*	*	0	0	GGGAGAGGAGTTGGGGTGGCAGGGCTGGAGGAGTGAGTGGCGTGGGAGGGGCGGTGTGCGGTGTCGTAGTGGTCGATATAAGACCCCTGTATTTCAATAG	BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB	RG:Z:GANCAGNA},
			name		=>	"paired align reads odd flag"
		}
	];
	
	my $alignscript		=		"$Bin/jobalign.pl";
	my $flagfile		=		"$Bin/../stopalign.flag";
	foreach my $test ( @$tests ) {
		my $expected = $test->{expected};
		my $input = $test->{input};
		my $name = $test->{name};
		
		$self->logDebug("expected", $expected);
		$self->logDebug("input",$input);
		$self->logDebug("name",$name);
		
		no warnings;
		
		*getBamLines=sub{
			
			return $input;
			
		};
		my $result = $self->bamIsAPair("dummy");
		$self->logDebug("result", $result);
		
		ok($result eq $expected, $name);
		
	}
		#BamIsAPairment failed for UUID $uuid in location $location

	
	
	
}




} #### end

